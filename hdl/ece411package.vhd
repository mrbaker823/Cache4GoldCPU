--
-- COMPONENT : LC3B_TYPES
--
-- GENERATED BY SYSTEM ARCHITECT VERSION V8.4_3.7
-- EDITED BY MATT ZAVISLAK FOR ECE 312 MP3 ON NOVEMBER 10, 2000
-- VERSION 2.0
-- EDITED BY DANIEL MANJARRES FOR ECE 411 JANUARY 2010
--
LIBRARY IEEE ;
USE IEEE.STD_LOGIC_1164.ALL;

PACKAGE LC3B_TYPES IS
-- DATAPATH SIGNAL WIDTHS
	SUBTYPE LC3B_PWORD     IS STD_LOGIC_VECTOR(255 DOWNTO 0);  --"POLY" WORD
	SUBTYPE LC3B_OWORD     IS STD_LOGIC_VECTOR(127 DOWNTO 0);  --OCTAL WORD
	SUBTYPE LC3B_QWORD     IS STD_LOGIC_VECTOR(63 DOWNTO 0);  --QUAD WORD
	SUBTYPE LC3B_DWORD     IS STD_LOGIC_VECTOR(31 DOWNTO 0);  --DOUBLE WORD
	SUBTYPE LC3B_WORD      IS STD_LOGIC_VECTOR(15 DOWNTO 0);
	SUBTYPE LC3B_BYTE      IS STD_LOGIC_VECTOR(7 DOWNTO 0);
	SUBTYPE LC3B_NIBBLE    IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_CC        IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_REG       IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_ALUOP     IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_SHFTOP    IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_IMM5      IS STD_LOGIC_VECTOR(4 DOWNTO 0);
	SUBTYPE LC3B_OFFSET9   IS STD_LOGIC_VECTOR(8 DOWNTO 0);
	SUBTYPE LC3B_OFFSET11  IS STD_LOGIC_VECTOR(10 DOWNTO 0);
	SUBTYPE LC3B_INDEX6    IS STD_LOGIC_VECTOR(5 DOWNTO 0);
	SUBTYPE LC3B_offset6    IS STD_LOGIC_VECTOR(5 DOWNTO 0);
	SUBTYPE LC3B_TRAPVECT8 IS STD_LOGIC_VECTOR(7 DOWNTO 0);
	SUBTYPE LC3B_OPCODE    IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_4MUX_SEL  IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_4MUXSEL  IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_8MUX_SEL  IS STD_LOGIC_VECTOR(2 DOWNTO 0);
  SUBTYPE LC3B_3DECODE   IS STD_LOGIC_VECTOR(2 DOWNTO 0);
--CACHE SIGNALS (ADD MORE TO ME!!)
  SUBTYPE LC3B_C_OFFSET  IS STD_LOGIC_VECTOR(3 DOWNTO 0);
  SUBTYPE LC3B_C_INDEX   IS STD_LOGIC_VECTOR(2 DOWNTO 0);
  SUBTYPE LC3B_C_TAG     IS STD_LOGIC_VECTOR(8 DOWNTO 0);
  SUBTYPE LC3B_BR_TAG    IS STD_LOGIC_VECTOR(12 DOWNTO 0);
  SUBTYPE LC3B_BR_BHT    IS STD_LOGIC_VECTOR(1 DOWNTO 0);     

	TYPE MEMORY_ARRAY_64K IS ARRAY (0 TO 65535) OF LC3B_BYTE;
	
	TYPE OPNAME IS ( add_op, and_op, not_op, pass_op, sll_op, srl_op, sra_op, bad_op, ldr_op, str_op, 
	                 br_op, jmp_op, jsr_op, jsrr_op, ldb_op, ldi_op, lea_op, ret_op, rti_op, shf_op, stb_op,
	                 sti_op, trap_op);


	TYPE IF_CONTROL IS RECORD
	  PCMUXSel : LC3B_4MUX_SEL;
	  IAddrMuxSel : std_logic;
	  IROutMuxSel : std_logic;
	END RECORD;

	TYPE ID_CONTROL IS RECORD
	  PCAddMUXSel	: std_logic;
		IDPCMUXSel	: std_logic;
	  DRMUXSel	: std_logic;
		SRAMUXSel	: std_logic;	
		SRBMuxSel : std_logic;	 
	END RECORD;

	TYPE EX_CONTROL IS RECORD
		aluop 		: LC3B_ALUOP;
	  aluxop  : LC3B_ALUOP;
	  alunop  : LC3B_ALUOP;
		ALUMUXSel	: LC3B_4MUX_SEL;
		LoadNZP		: std_logic;
		GenCCMuxSel : std_logic;
	END RECORD;

	TYPE MEM_CONTROL IS RECORD
	  MARMUXSel	: std_logic;
		LoadMAR		: std_logic;
		DRead_L		: std_logic;
		DWriteL_L	: std_logic;
		DWriteH_L	: std_logic;
		ldi       : std_logic;
		sti       : std_logic;
		LDIMuxSel : std_logic;
		BTB_Write : std_logic;
	END RECORD;

	TYPE WB_CONTROL IS RECORD
	  ByteMUXSel		: std_logic;
		RegDataMuxSel	: LC3B_4MUX_SEL;
		Write			: std_logic;
	END RECORD;
	
	TYPE CONTROL_WORD IS RECORD
		fetch	: IF_CONTROL;
		id		: ID_CONTROL;	    
		ex 		: EX_CONTROL;
	  mem		: MEM_CONTROL;
		wb 		: WB_CONTROL;
	  name 	: OPNAME;
	  RegWrite : std_logic;
	   
	END RECORD;
	
	-- ALU OP DEFINITIONS
	CONSTANT ALU_ADD  : LC3B_ALUOP := "000";
	CONSTANT ALU_AND  : LC3B_ALUOP := "001";
	CONSTANT ALU_NOT  : LC3B_ALUOP := "010";
	CONSTANT ALU_PASS : LC3B_ALUOP := "011";
	CONSTANT ALU_SLL  : LC3B_ALUOP := "100";
	CONSTANT ALU_SRL  : LC3B_ALUOP := "110";
	CONSTANT ALU_SRA  : LC3B_ALUOP := "111";
	
	-- ALUX OP DEFINITIONS
	CONSTANT ALUX_SUB  : LC3B_ALUOP := "000";
	CONSTANT ALUX_OR   : LC3B_ALUOP := "001";
	CONSTANT ALUX_XOR  : LC3B_ALUOP := "010";
	CONSTANT ALUX_MULT : LC3B_ALUOP := "011";
	CONSTANT ALUX_DIV  : LC3B_ALUOP := "100";
	CONSTANT ALUX_NAND : LC3B_ALUOP := "101";
	CONSTANT ALUX_NOR  : LC3B_ALUOP := "110";
	CONSTANT ALUX_NULL : LC3B_ALUOP := "111";

	-- ALUN OP DEFINITIONS
	CONSTANT ALUN_NEG  : LC3B_ALUOP := "000";
	CONSTANT ALUN_BSWAP   : LC3B_ALUOP := "001";
	CONSTANT ALUN_BADD  : LC3B_ALUOP := "010";
	CONSTANT ALUN_SXB : LC3B_ALUOP := "011";
	CONSTANT ALUN_ZXB  : LC3B_ALUOP := "100";
	CONSTANT ALUN_MAX : LC3B_ALUOP := "101";
	CONSTANT ALUN_MIN  : LC3B_ALUOP := "110";
	CONSTANT ALUN_NULL : LC3B_ALUOP := "111";

	-- SHIFTER OP DEFINITIONS
	CONSTANT SHFT_SLL : LC3B_SHFTOP := "10";
	CONSTANT SHFT_SRL : LC3B_SHFTOP := "01";
	CONSTANT SHFT_SRA : LC3B_SHFTOP := "11";

	-- INSTRUCTION DEFINITIONS
	CONSTANT OP_ADD  : LC3B_OPCODE := "0001";
	CONSTANT OP_AND  : LC3B_OPCODE := "0101";
	CONSTANT OP_BR   : LC3B_OPCODE := "0000";
	CONSTANT OP_JSR  : LC3B_OPCODE := "0100";
	CONSTANT OP_JMP  : LC3B_OPCODE := "1100";
	CONSTANT OP_LDR  : LC3B_OPCODE := "0110";
	CONSTANT OP_LDB  : LC3B_OPCODE := "0010";
	CONSTANT OP_LDI  : LC3B_OPCODE := "1010";
	CONSTANT OP_LEA  : LC3B_OPCODE := "1110";
	CONSTANT OP_NOT  : LC3B_OPCODE := "1001";
	CONSTANT OP_RET  : LC3B_OPCODE := "1100";
	CONSTANT OP_RTI  : LC3B_OPCODE := "1000";
	CONSTANT OP_SHF  : LC3B_OPCODE := "1101";
	CONSTANT OP_STR  : LC3B_OPCODE := "0111";
	CONSTANT OP_STB  : LC3B_OPCODE := "0011";
	CONSTANT OP_STI  : LC3B_OPCODE := "1011";
	CONSTANT OP_TRAP : LC3B_OPCODE := "1111";

	-- TIME DELAYS **********
	-- CHANGED FOR FALL 2009: ALU, ADDER, SHIFTER DELAYS
	CONSTANT HALF_CLOCK_PERIOD  : TIME := 22 NS;
	CONSTANT CLOCK_PERIOD       : TIME := (HALF_CLOCK_PERIOD + HALF_CLOCK_PERIOD);
	CONSTANT DELAY_LOGIC       : TIME := 1 NS;
	CONSTANT DELAY_LOGIC2       : TIME := 1 NS;
	CONSTANT DELAY_LOGIC3       : TIME := 2 NS;
	CONSTANT DELAY_LOGIC4       : TIME := 2 NS;
	CONSTANT DELAY_MUX2         : TIME := 2 NS;
	CONSTANT DELAY_MUX4         : TIME := 4 NS;
	CONSTANT DELAY_MUX8         : TIME := 6 NS;
	CONSTANT DELAY_DECODE3      : TIME := 6 NS;
	CONSTANT DELAY_GENCC        : TIME := 6 NS;
	CONSTANT DELAY_ALU          : TIME := 15 NS;
	CONSTANT DELAY_ADDER        : TIME := 12 NS;
	CONSTANT DELAY_SHIFTER      : TIME := 10 NS;
	CONSTANT DELAY_REGFILE_READ : TIME := 7 NS;
	CONSTANT DELAY_REG          : TIME := 5 NS;
	CONSTANT DELAY_COMPARE8     : TIME := 3 NS;
	CONSTANT DELAY_COMPARE16    : TIME := 4 NS;

	--DELAYS FOR DATA ARRAYS
	CONSTANT DELAY_128B : TIME := 14 NS;
	CONSTANT DELAY_256B : TIME := 20 NS;
	CONSTANT DELAY_512B : TIME := 25 NS;
	CONSTANT DELAY_1KB  : TIME := 35 NS;
	CONSTANT DELAY_2KB  : TIME := 45 NS;
	CONSTANT DELAY_4KB  : TIME := 60 NS;

	--DELAY FOR CONTROL ROM
  CONSTANT DELAY_ROM : TIME := 3 NS;
	
	--DELAYS FOR DRAM.
	CONSTANT DELAY_MP1_MEM  : TIME := 50 NS;
	CONSTANT DELAY_MP2_MEM  : TIME := 500 NS;
	CONSTANT DELAY_MP22_MEM : TIME := 500 NS;
	CONSTANT DELAY_16B_MEM  : TIME := 500 NS;
	CONSTANT DELAY_32B_MEM  : TIME := 510 NS;
	CONSTANT DELAY_64B_MEM  : TIME := 530 NS;
	CONSTANT DELAY_128B_MEM : TIME := 570 NS;
	CONSTANT DELAY_256B_MEM : TIME := 650 NS;
      
	PROCEDURE MYDRAMINIT_64K (
		VARIABLE MEM : OUT MEMORY_ARRAY_64K);

END LC3B_TYPES ;

PACKAGE BODY LC3B_TYPES IS

	PROCEDURE MYDRAMINIT_64K (
		VARIABLE MEM : OUT MEMORY_ARRAY_64K) IS
		BEGIN  -- MYDRAMINIT

	    -- USE THE DOIFY.SH SCRIPT TO LOAD PROGRAMS INTO MEMORY, OR 
	    -- INSERT YOUR MEMORY VECTORS HERE.
	    -- EXAMPLE: MEM(0) := TO_STDLOGICVECTOR(X"00");
	    
		MEM(0) := TO_STDLOGICVECTOR(X"12");
		MEM(1) := TO_STDLOGICVECTOR(X"62");
		MEM(2) := TO_STDLOGICVECTOR(X"13");
		MEM(3) := TO_STDLOGICVECTOR(X"64");
		MEM(4) := TO_STDLOGICVECTOR(X"14");
		MEM(5) := TO_STDLOGICVECTOR(X"68");
		MEM(6) := TO_STDLOGICVECTOR(X"00");
		MEM(7) := TO_STDLOGICVECTOR(X"00");
		MEM(8) := TO_STDLOGICVECTOR(X"00");
		MEM(9) := TO_STDLOGICVECTOR(X"00");
		MEM(10) := TO_STDLOGICVECTOR(X"00");
		MEM(11) := TO_STDLOGICVECTOR(X"00");
		MEM(12) := TO_STDLOGICVECTOR(X"00");
		MEM(13) := TO_STDLOGICVECTOR(X"00");
		MEM(14) := TO_STDLOGICVECTOR(X"00");
		MEM(15) := TO_STDLOGICVECTOR(X"00");
		MEM(16) := TO_STDLOGICVECTOR(X"00");
		MEM(17) := TO_STDLOGICVECTOR(X"00");
		MEM(18) := TO_STDLOGICVECTOR(X"00");
		MEM(19) := TO_STDLOGICVECTOR(X"00");
		MEM(20) := TO_STDLOGICVECTOR(X"0D");
		MEM(21) := TO_STDLOGICVECTOR(X"0E");
		MEM(22) := TO_STDLOGICVECTOR(X"00");
		MEM(23) := TO_STDLOGICVECTOR(X"00");
		MEM(24) := TO_STDLOGICVECTOR(X"00");
		MEM(25) := TO_STDLOGICVECTOR(X"00");
		MEM(26) := TO_STDLOGICVECTOR(X"00");
		MEM(27) := TO_STDLOGICVECTOR(X"00");
		MEM(28) := TO_STDLOGICVECTOR(X"00");
		MEM(29) := TO_STDLOGICVECTOR(X"00");
		MEM(30) := TO_STDLOGICVECTOR(X"00");
		MEM(31) := TO_STDLOGICVECTOR(X"00");
		MEM(32) := TO_STDLOGICVECTOR(X"00");
		MEM(33) := TO_STDLOGICVECTOR(X"00");
		MEM(34) := TO_STDLOGICVECTOR(X"00");
		MEM(35) := TO_STDLOGICVECTOR(X"00");
		MEM(36) := TO_STDLOGICVECTOR(X"01");
		MEM(37) := TO_STDLOGICVECTOR(X"00");
		MEM(38) := TO_STDLOGICVECTOR(X"02");
		MEM(39) := TO_STDLOGICVECTOR(X"00");
		MEM(40) := TO_STDLOGICVECTOR(X"FF");
		MEM(41) := TO_STDLOGICVECTOR(X"FF");
		MEM(42) := TO_STDLOGICVECTOR(X"01");
		MEM(43) := TO_STDLOGICVECTOR(X"00");
		MEM(44) := TO_STDLOGICVECTOR(X"0D");
		MEM(45) := TO_STDLOGICVECTOR(X"60");
		MEM(46) := TO_STDLOGICVECTOR(X"DD");
		MEM(47) := TO_STDLOGICVECTOR(X"BA");
		MEM(48) := TO_STDLOGICVECTOR(X"42");
		MEM(49) := TO_STDLOGICVECTOR(X"16");
		MEM(50) := TO_STDLOGICVECTOR(X"82");
		MEM(51) := TO_STDLOGICVECTOR(X"5A");
		MEM(52) := TO_STDLOGICVECTOR(X"7F");
		MEM(53) := TO_STDLOGICVECTOR(X"9C");
		MEM(54) := TO_STDLOGICVECTOR(X"00");
		MEM(55) := TO_STDLOGICVECTOR(X"00");
		MEM(56) := TO_STDLOGICVECTOR(X"00");
		MEM(57) := TO_STDLOGICVECTOR(X"00");
		MEM(58) := TO_STDLOGICVECTOR(X"00");
		MEM(59) := TO_STDLOGICVECTOR(X"00");
		MEM(60) := TO_STDLOGICVECTOR(X"00");
		MEM(61) := TO_STDLOGICVECTOR(X"00");
		MEM(62) := TO_STDLOGICVECTOR(X"00");
		MEM(63) := TO_STDLOGICVECTOR(X"00");
		MEM(64) := TO_STDLOGICVECTOR(X"00");
		MEM(65) := TO_STDLOGICVECTOR(X"00");
		MEM(66) := TO_STDLOGICVECTOR(X"00");
		MEM(67) := TO_STDLOGICVECTOR(X"00");
		MEM(68) := TO_STDLOGICVECTOR(X"15");
		MEM(69) := TO_STDLOGICVECTOR(X"7C");
		MEM(70) := TO_STDLOGICVECTOR(X"15");
		MEM(71) := TO_STDLOGICVECTOR(X"6E");
		MEM(72) := TO_STDLOGICVECTOR(X"44");
		MEM(73) := TO_STDLOGICVECTOR(X"12");
		MEM(74) := TO_STDLOGICVECTOR(X"00");
		MEM(75) := TO_STDLOGICVECTOR(X"00");
		MEM(76) := TO_STDLOGICVECTOR(X"00");
		MEM(77) := TO_STDLOGICVECTOR(X"00");
		MEM(78) := TO_STDLOGICVECTOR(X"00");
		MEM(79) := TO_STDLOGICVECTOR(X"00");
		MEM(80) := TO_STDLOGICVECTOR(X"00");
		MEM(81) := TO_STDLOGICVECTOR(X"00");
		MEM(82) := TO_STDLOGICVECTOR(X"00");
		MEM(83) := TO_STDLOGICVECTOR(X"00");
		MEM(84) := TO_STDLOGICVECTOR(X"00");
		MEM(85) := TO_STDLOGICVECTOR(X"00");
		MEM(86) := TO_STDLOGICVECTOR(X"00");
		MEM(87) := TO_STDLOGICVECTOR(X"00");
		MEM(88) := TO_STDLOGICVECTOR(X"18");
		MEM(89) := TO_STDLOGICVECTOR(X"08");
		MEM(90) := TO_STDLOGICVECTOR(X"00");
		MEM(91) := TO_STDLOGICVECTOR(X"00");
		MEM(92) := TO_STDLOGICVECTOR(X"00");
		MEM(93) := TO_STDLOGICVECTOR(X"00");
		MEM(94) := TO_STDLOGICVECTOR(X"00");
		MEM(95) := TO_STDLOGICVECTOR(X"00");
		MEM(96) := TO_STDLOGICVECTOR(X"00");
		MEM(97) := TO_STDLOGICVECTOR(X"00");
		MEM(98) := TO_STDLOGICVECTOR(X"00");
		MEM(99) := TO_STDLOGICVECTOR(X"00");
		MEM(100) := TO_STDLOGICVECTOR(X"00");
		MEM(101) := TO_STDLOGICVECTOR(X"00");
		MEM(102) := TO_STDLOGICVECTOR(X"00");
		MEM(103) := TO_STDLOGICVECTOR(X"00");
		MEM(104) := TO_STDLOGICVECTOR(X"E3");
		MEM(105) := TO_STDLOGICVECTOR(X"0F");
		MEM(106) := TO_STDLOGICVECTOR(X"00");
		MEM(107) := TO_STDLOGICVECTOR(X"00");
		MEM(108) := TO_STDLOGICVECTOR(X"00");
		MEM(109) := TO_STDLOGICVECTOR(X"00");
		MEM(110) := TO_STDLOGICVECTOR(X"00");
		MEM(111) := TO_STDLOGICVECTOR(X"00");
		MEM(112) := TO_STDLOGICVECTOR(X"00");
		MEM(113) := TO_STDLOGICVECTOR(X"00");
		MEM(114) := TO_STDLOGICVECTOR(X"00");
		MEM(115) := TO_STDLOGICVECTOR(X"00");
		MEM(116) := TO_STDLOGICVECTOR(X"00");
		MEM(117) := TO_STDLOGICVECTOR(X"00");
		MEM(118) := TO_STDLOGICVECTOR(X"00");
		MEM(119) := TO_STDLOGICVECTOR(X"00");
		MEM(120) := TO_STDLOGICVECTOR(X"17");
		MEM(121) := TO_STDLOGICVECTOR(X"62");
		MEM(122) := TO_STDLOGICVECTOR(X"FE");
		MEM(123) := TO_STDLOGICVECTOR(X"0F");
		MEM(124) := TO_STDLOGICVECTOR(X"00");
		MEM(125) := TO_STDLOGICVECTOR(X"00");
		MEM(126) := TO_STDLOGICVECTOR(X"00");
		MEM(127) := TO_STDLOGICVECTOR(X"00");
		MEM(128) := TO_STDLOGICVECTOR(X"00");
		MEM(129) := TO_STDLOGICVECTOR(X"00");
		MEM(130) := TO_STDLOGICVECTOR(X"00");
		MEM(131) := TO_STDLOGICVECTOR(X"00");
		MEM(132) := TO_STDLOGICVECTOR(X"00");
		MEM(133) := TO_STDLOGICVECTOR(X"00");
		MEM(134) := TO_STDLOGICVECTOR(X"00");
		MEM(135) := TO_STDLOGICVECTOR(X"00");
		MEM(136) := TO_STDLOGICVECTOR(X"00");
		MEM(137) := TO_STDLOGICVECTOR(X"00");
		MEM(138) := TO_STDLOGICVECTOR(X"16");
		MEM(139) := TO_STDLOGICVECTOR(X"62");
		MEM(140) := TO_STDLOGICVECTOR(X"FE");
		MEM(141) := TO_STDLOGICVECTOR(X"0F");
		MEM(142) := TO_STDLOGICVECTOR(X"00");
		MEM(143) := TO_STDLOGICVECTOR(X"00");
		MEM(144) := TO_STDLOGICVECTOR(X"00");
		MEM(145) := TO_STDLOGICVECTOR(X"00");
		MEM(146) := TO_STDLOGICVECTOR(X"00");
		MEM(147) := TO_STDLOGICVECTOR(X"00");
		MEM(148) := TO_STDLOGICVECTOR(X"00");
		MEM(149) := TO_STDLOGICVECTOR(X"00");
		MEM(150) := TO_STDLOGICVECTOR(X"00");
		MEM(151) := TO_STDLOGICVECTOR(X"00");
		MEM(152) := TO_STDLOGICVECTOR(X"00");
		MEM(153) := TO_STDLOGICVECTOR(X"00");
		MEM(154) := TO_STDLOGICVECTOR(X"00");
		MEM(155) := TO_STDLOGICVECTOR(X"00");

		--MAKE NO CHANGES AFTER THIS LINE.
	END MYDRAMINIT_64K;

END LC3B_TYPES;
