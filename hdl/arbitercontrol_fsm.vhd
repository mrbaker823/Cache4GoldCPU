-- VHDL Entity ece411.ArbiterControl.symbol
--
-- Created:
--          by - mcasano2.ews (evrt-252-14.ews.illinois.edu)
--          at - 19:55:59 04/24/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY ArbiterControl IS
   PORT( 
      D_Access   : IN     std_logic;
      I_Access   : IN     std_logic;
      L2_MRESP_H : IN     std_logic;
      clk        : IN     std_logic;
      rst        : IN     std_logic;
      ArbiterSel : OUT    std_logic
   );

-- Declarations

END ArbiterControl ;

--
-- VHDL Architecture ece411.ArbiterControl.fsm
--
-- Created:
--          by - mcasano2.ews (evrt-252-14.ews.illinois.edu)
--          at - 19:55:59 04/24/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF ArbiterControl IS

   TYPE STATE_TYPE IS (
      S,
      Instr,
      Data,
      s0
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= S;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      D_Access,
      I_Access,
      L2_MRESP_H,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN S => 
            IF (L2_MRESP_H = '1') THEN 
               next_state <= s0;
            ELSIF (I_Access = '0') THEN 
               next_state <= Instr;
            ELSIF (D_Access = '0') THEN 
               next_state <= Data;
            ELSE
               next_state <= S;
            END IF;
         WHEN Instr => 
            IF (L2_MRESP_H = '1') THEN 
               next_state <= S;
            ELSE
               next_state <= Instr;
            END IF;
         WHEN Data => 
            IF (L2_MRESP_H = '1') THEN 
               next_state <= S;
            ELSE
               next_state <= Data;
            END IF;
         WHEN s0 => 
            next_state <= S;
         WHEN OTHERS =>
            next_state <= S;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN Instr => 
            ArbiterSel <= '0';
         WHEN Data => 
            ArbiterSel <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
