-- VHDL Entity ece411.LRUperIndex.symbol
--
-- Created:
--          by - baker30.ews (evrt-252-28.ews.illinois.edu)
--          at - 18:50:44 04/25/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY LRUperIndex IS
   PORT( 
      CLK     : IN     std_logic;
      HitSel  : IN     LC3B_8MUX_SEL;
      LRUW_H  : IN     std_logic;
      RESET_L : IN     STD_LOGIC;
      LRUsel  : OUT    LC3B_8MUX_SEL
   );

-- Declarations

END LRUperIndex ;

--
-- VHDL Architecture ece411.LRUperIndex.struct
--
-- Created:
--          by - baker30.ews (evrt-252-28.ews.illinois.edu)
--          at - 18:50:45 04/25/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF LRUperIndex IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL G0       : STD_LOGIC;
   SIGNAL G1       : STD_LOGIC;
   SIGNAL G2       : STD_LOGIC;
   SIGNAL G3       : STD_LOGIC;
   SIGNAL G4       : STD_LOGIC;
   SIGNAL G5       : STD_LOGIC;
   SIGNAL G6       : STD_LOGIC;
   SIGNAL G7       : std_logic;
   SIGNAL WRITE_H1 : std_logic;
   SIGNAL WRITE_H2 : std_logic;
   SIGNAL WRITE_H3 : std_logic;
   SIGNAL WRITE_H4 : std_logic;
   SIGNAL WRITE_H5 : std_logic;
   SIGNAL WRITE_H6 : std_logic;
   SIGNAL WRITE_H7 : std_logic;
   SIGNAL bit3out1 : LC3B_8MUX_SEL;
   SIGNAL bit3out2 : LC3B_8MUX_SEL;
   SIGNAL bit3out3 : LC3B_8MUX_SEL;
   SIGNAL bit3out4 : LC3B_8MUX_SEL;
   SIGNAL bit3out5 : LC3B_8MUX_SEL;
   SIGNAL bit3out6 : LC3B_8MUX_SEL;
   SIGNAL bit3out7 : LC3B_8MUX_SEL;
   SIGNAL rCon0    : LC3B_8MUX_SEL;
   SIGNAL rCon1    : LC3B_8MUX_SEL;
   SIGNAL rCon2    : LC3B_8MUX_SEL;
   SIGNAL rCon3    : LC3B_8MUX_SEL;
   SIGNAL rCon4    : LC3B_8MUX_SEL;
   SIGNAL rCon5    : LC3B_8MUX_SEL;
   SIGNAL rCon6    : LC3B_8MUX_SEL;
   SIGNAL rCon7    : LC3B_8MUX_SEL;
   SIGNAL way0     : std_logic;
   SIGNAL way1     : std_logic;
   SIGNAL way2     : std_logic;
   SIGNAL way3     : std_logic;
   SIGNAL way4     : std_logic;
   SIGNAL way5     : std_logic;
   SIGNAL way6     : std_logic;
   SIGNAL way7     : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL LRUsel_internal : LC3B_8MUX_SEL;


   -- Component Declarations
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR4
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      D : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR8
   PORT (
      A      : IN     std_logic ;
      B      : IN     std_logic ;
      C      : IN     std_logic ;
      D      : IN     std_logic ;
      E      : IN     std_logic ;
      F      : IN     std_logic ;
      G      : IN     std_logic ;
      H      : IN     std_logic ;
      Output : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Reg3bit
   PORT (
      RESET_L : IN     std_logic ;
      WRITE_H : IN     std_logic ;
      bit3in  : IN     LC3B_8MUX_SEL ;
      bit3out : OUT    LC3B_8MUX_SEL ;
      rCon    : IN     LC3B_8MUX_SEL ;
      CLK     : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT compare3bit
   PORT (
      Hit    : IN     LC3B_8MUX_Sel ;
      LRUval : IN     LC3B_8MUX_Sel ;
      Shift  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OR3 USE ENTITY mp3lib.OR3;
   FOR ALL : OR4 USE ENTITY ece411.OR4;
   FOR ALL : OR8 USE ENTITY ece411.OR8;
   FOR ALL : Reg3bit USE ENTITY ece411.Reg3bit;
   FOR ALL : compare3bit USE ENTITY ece411.compare3bit;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   rCon0 <= "000";
   rCon1 <= "001";
   rCon2 <= "010";
   rCon3 <= "011";
   rCon4 <= "100";
   rCon5 <= "101";
   rCon6 <= "110";
   rCon7 <= "111";                                    


   -- Instance port mappings.
   U_6 : OR2
      PORT MAP (
         A => G0,
         B => G1,
         F => WRITE_H1
      );
   U_5 : OR4
      PORT MAP (
         A => G0,
         B => G1,
         C => G2,
         D => G3,
         F => WRITE_H3
      );
   U_0 : OR8
      PORT MAP (
         A      => G0,
         B      => G1,
         C      => G2,
         D      => G3,
         E      => G4,
         F      => G5,
         G      => G6,
         H      => G7,
         Output => WRITE_H7
      );
   U_1 : OR8
      PORT MAP (
         A      => G0,
         B      => G1,
         C      => G2,
         D      => G3,
         E      => G4,
         F      => G5,
         G      => G6,
         H      => G6,
         Output => WRITE_H6
      );
   U_2 : OR8
      PORT MAP (
         A      => G0,
         B      => G1,
         C      => G2,
         D      => G3,
         E      => G4,
         F      => G5,
         G      => G5,
         H      => G5,
         Output => WRITE_H5
      );
   U_3 : OR8
      PORT MAP (
         A      => G0,
         B      => G1,
         C      => G2,
         D      => G3,
         E      => G4,
         F      => G4,
         G      => G4,
         H      => G4,
         Output => WRITE_H4
      );
   reg0 : Reg3bit
      PORT MAP (
         RESET_L => RESET_L,
         WRITE_H => G0,
         bit3in  => bit3out1,
         bit3out => LRUsel_internal,
         rCon    => rCon0,
         CLK     => CLK
      );
   reg1 : Reg3bit
      PORT MAP (
         RESET_L => RESET_L,
         WRITE_H => WRITE_H1,
         bit3in  => bit3out2,
         bit3out => bit3out1,
         rCon    => rCon1,
         CLK     => CLK
      );
   reg2 : Reg3bit
      PORT MAP (
         RESET_L => RESET_L,
         WRITE_H => WRITE_H2,
         bit3in  => bit3out3,
         bit3out => bit3out2,
         rCon    => rCon2,
         CLK     => CLK
      );
   reg3 : Reg3bit
      PORT MAP (
         RESET_L => RESET_L,
         WRITE_H => WRITE_H3,
         bit3in  => bit3out4,
         bit3out => bit3out3,
         rCon    => rCon3,
         CLK     => CLK
      );
   reg4 : Reg3bit
      PORT MAP (
         RESET_L => RESET_L,
         WRITE_H => WRITE_H4,
         bit3in  => bit3out5,
         bit3out => bit3out4,
         rCon    => rCon4,
         CLK     => CLK
      );
   reg5 : Reg3bit
      PORT MAP (
         RESET_L => RESET_L,
         WRITE_H => WRITE_H5,
         bit3in  => bit3out6,
         bit3out => bit3out5,
         rCon    => rCon5,
         CLK     => CLK
      );
   reg6 : Reg3bit
      PORT MAP (
         RESET_L => RESET_L,
         WRITE_H => WRITE_H6,
         bit3in  => bit3out7,
         bit3out => bit3out6,
         rCon    => rCon6,
         CLK     => CLK
      );
   reg7 : Reg3bit
      PORT MAP (
         RESET_L => RESET_L,
         WRITE_H => WRITE_H7,
         bit3in  => HitSel,
         bit3out => bit3out7,
         rCon    => rCon7,
         CLK     => CLK
      );
   U_4 : compare3bit
      PORT MAP (
         Hit    => HitSel,
         LRUval => LRUsel_internal,
         Shift  => way0
      );
   U_8 : compare3bit
      PORT MAP (
         Hit    => HitSel,
         LRUval => bit3out1,
         Shift  => way1
      );
   U_9 : compare3bit
      PORT MAP (
         Hit    => HitSel,
         LRUval => bit3out2,
         Shift  => way2
      );
   U_10 : compare3bit
      PORT MAP (
         Hit    => HitSel,
         LRUval => bit3out3,
         Shift  => way3
      );
   U_11 : compare3bit
      PORT MAP (
         Hit    => HitSel,
         LRUval => bit3out4,
         Shift  => way4
      );
   U_12 : compare3bit
      PORT MAP (
         Hit    => HitSel,
         LRUval => bit3out5,
         Shift  => way5
      );
   U_13 : compare3bit
      PORT MAP (
         Hit    => HitSel,
         LRUval => bit3out6,
         Shift  => way6
      );
   U_14 : compare3bit
      PORT MAP (
         Hit    => HitSel,
         LRUval => bit3out7,
         Shift  => way7
      );
   Get0 : AND2
      PORT MAP (
         A => LRUW_H,
         B => way0,
         F => G0
      );
   Get1 : AND2
      PORT MAP (
         A => LRUW_H,
         B => way1,
         F => G1
      );
   Get2 : AND2
      PORT MAP (
         A => LRUW_H,
         B => way2,
         F => G2
      );
   Get3 : AND2
      PORT MAP (
         A => LRUW_H,
         B => way3,
         F => G3
      );
   Get4 : AND2
      PORT MAP (
         A => LRUW_H,
         B => way4,
         F => G4
      );
   Get5 : AND2
      PORT MAP (
         A => LRUW_H,
         B => way5,
         F => G5
      );
   Get6 : AND2
      PORT MAP (
         A => LRUW_H,
         B => way6,
         F => G6
      );
   Get7 : AND2
      PORT MAP (
         A => LRUW_H,
         B => way7,
         F => G7
      );
   U_7 : OR3
      PORT MAP (
         A => G0,
         B => G1,
         C => G2,
         F => WRITE_H2
      );

   -- Implicit buffered output assignments
   LRUsel <= LRUsel_internal;

END struct;
