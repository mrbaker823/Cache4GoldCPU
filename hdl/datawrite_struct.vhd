-- VHDL Entity ece411.DataWrite.interface
--
-- Created:
--          by - baker30.ews (evrt-252-37.ews.illinois.edu)
--          at - 21:16:44 04/18/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY DataWrite IS
   PORT( 
      CacheWrite : IN     std_logic;
      HitBus     : IN     std_logic_vector (7 DOWNTO 0);
      LRUout     : IN     LC3B_8MUX_SEL;
      hit        : IN     std_logic;
      DataWrite0 : OUT    std_logic;
      DataWrite1 : OUT    std_logic;
      DataWrite2 : OUT    std_logic;
      DataWrite3 : OUT    std_logic;
      DataWrite4 : OUT    std_logic;
      DataWrite5 : OUT    std_logic;
      DataWrite6 : OUT    std_logic;
      DataWrite7 : OUT    std_logic
   );

-- Declarations

END DataWrite ;

--
-- VHDL Architecture ece411.DataWrite.struct
--
-- Created:
--          by - baker30.ews (evrt-252-37.ews.illinois.edu)
--          at - 21:16:44 04/18/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF DataWrite IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL HIT0   : std_logic;
   SIGNAL HIT1   : std_logic;
   SIGNAL HIT2   : std_logic;
   SIGNAL HIT3   : std_logic;
   SIGNAL HIT4   : std_logic;
   SIGNAL HIT5   : std_logic;
   SIGNAL HIT6   : std_logic;
   SIGNAL HIT7   : std_logic;
   SIGNAL LRU0   : std_logic;
   SIGNAL LRU1   : std_logic;
   SIGNAL LRU2   : std_logic;
   SIGNAL LRU3   : std_logic;
   SIGNAL LRU4   : std_logic;
   SIGNAL LRU5   : std_logic;
   SIGNAL LRU6   : std_logic;
   SIGNAL LRU7   : std_logic;
   SIGNAL LRUBus : LC3B_BYTE;
   SIGNAL Miss   : STD_LOGIC;


   -- Component Declarations
   COMPONENT ByteBusIn
   PORT (
      ByteIn : IN     LC3B_BYTE;
      sig0   : OUT    std_logic;
      sig1   : OUT    std_logic;
      sig2   : OUT    std_logic;
      sig3   : OUT    std_logic;
      sig4   : OUT    std_logic;
      sig5   : OUT    std_logic;
      sig6   : OUT    std_logic;
      sig7   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT DetermDW
   PORT (
      CacheWrite : IN     std_logic ;
      HITx       : IN     std_logic ;
      Hit        : IN     std_logic ;
      LRUx       : IN     std_logic ;
      Miss       : IN     STD_LOGIC ;
      DataWriteX : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DECODE3_8
   PORT (
      A : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      F : OUT    LC3B_BYTE 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ByteBusIn USE ENTITY ece411.ByteBusIn;
   FOR ALL : DECODE3_8 USE ENTITY mp3lib.DECODE3_8;
   FOR ALL : DetermDW USE ENTITY ece411.DetermDW;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   LRUBus2Bits : ByteBusIn
      PORT MAP (
         ByteIn => LRUBus,
         sig0   => LRU0,
         sig1   => LRU1,
         sig2   => LRU2,
         sig3   => LRU3,
         sig4   => LRU4,
         sig5   => LRU5,
         sig6   => LRU6,
         sig7   => LRU7
      );
   U_2 : ByteBusIn
      PORT MAP (
         ByteIn => HitBus,
         sig0   => HIT0,
         sig1   => HIT1,
         sig2   => HIT2,
         sig3   => HIT3,
         sig4   => HIT4,
         sig5   => HIT5,
         sig6   => HIT6,
         sig7   => HIT7
      );
   DetermDW0 : DetermDW
      PORT MAP (
         CacheWrite => CacheWrite,
         HITx       => HIT0,
         Hit        => hit,
         LRUx       => LRU0,
         Miss       => Miss,
         DataWriteX => DataWrite0
      );
   DetermDW1 : DetermDW
      PORT MAP (
         CacheWrite => CacheWrite,
         HITx       => HIT1,
         Hit        => hit,
         LRUx       => LRU1,
         Miss       => Miss,
         DataWriteX => DataWrite1
      );
   DetermDW2 : DetermDW
      PORT MAP (
         CacheWrite => CacheWrite,
         HITx       => HIT2,
         Hit        => hit,
         LRUx       => LRU2,
         Miss       => Miss,
         DataWriteX => DataWrite2
      );
   DetermDW3 : DetermDW
      PORT MAP (
         CacheWrite => CacheWrite,
         HITx       => HIT3,
         Hit        => hit,
         LRUx       => LRU3,
         Miss       => Miss,
         DataWriteX => DataWrite3
      );
   DetermDW4 : DetermDW
      PORT MAP (
         CacheWrite => CacheWrite,
         HITx       => HIT4,
         Hit        => hit,
         LRUx       => LRU4,
         Miss       => Miss,
         DataWriteX => DataWrite4
      );
   DetermDW5 : DetermDW
      PORT MAP (
         CacheWrite => CacheWrite,
         HITx       => HIT5,
         Hit        => hit,
         LRUx       => LRU5,
         Miss       => Miss,
         DataWriteX => DataWrite5
      );
   DetermDW6 : DetermDW
      PORT MAP (
         CacheWrite => CacheWrite,
         HITx       => HIT6,
         Hit        => hit,
         LRUx       => LRU6,
         Miss       => Miss,
         DataWriteX => DataWrite6
      );
   DetermDW7 : DetermDW
      PORT MAP (
         CacheWrite => CacheWrite,
         HITx       => HIT7,
         Hit        => hit,
         LRUx       => LRU7,
         Miss       => Miss,
         DataWriteX => DataWrite7
      );
   U_1 : DECODE3_8
      PORT MAP (
         A => LRUout,
         F => LRUBus
      );
   U_0 : NOT1
      PORT MAP (
         A => hit,
         F => Miss
      );

END struct;
