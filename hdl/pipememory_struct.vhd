-- VHDL Entity ece411.PipeMemory.interface
--
-- Created:
--          by - lachman1.ews (siebl-0220-04.ews.illinois.edu)
--          at - 03:18:15 04/26/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY PipeMemory IS
   PORT( 
      CLK         : IN     STD_LOGIC;
      D_ADDRESS   : IN     LC3B_WORD;
      D_DATAOUT   : IN     LC3B_WORD;
      D_MREAD_L   : IN     STD_LOGIC;
      D_MWRITEH_L : IN     STD_LOGIC;
      D_MWRITEL_L : IN     STD_LOGIC;
      I_ADDRESS   : IN     LC3B_WORD;
      I_MREAD_L   : IN     STD_LOGIC;
      RESET_L     : IN     STD_LOGIC;
      D_DATAIN    : OUT    LC3B_WORD;
      D_MRESP_H   : OUT    STD_LOGIC;
      I_DATAIN    : OUT    LC3B_WORD;
      I_MRESP_H   : OUT    STD_LOGIC
   );

-- Declarations

END PipeMemory ;

--
-- VHDL Architecture ece411.PipeMemory.struct
--
-- Created:
--          by - lachman1.ews (siebl-0220-04.ews.illinois.edu)
--          at - 03:18:16 04/26/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF PipeMemory IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL D_ADDRESS_pm   : LC3B_WORD;
   SIGNAL D_DATAOUT_pm   : LC3B_OWORD;
   SIGNAL D_MREAD_pm_L   : STD_LOGIC;
   SIGNAL D_MWRITEL_pm_L : STD_LOGIC;
   SIGNAL D_PMDATAIN     : LC3B_OWORD;
   SIGNAL D_PMRESP_H     : STD_LOGIC;
   SIGNAL I_ADDRESS_pm   : LC3B_WORD;
   SIGNAL I_MREAD_pm_L   : STD_LOGIC;
   SIGNAL I_PMDATAIN     : LC3B_OWORD;
   SIGNAL I_PMRESP_H     : STD_LOGIC;
   SIGNAL L2_ADDRESS     : LC3B_WORD;
   SIGNAL L2_DATAIN      : LC3B_OWORD;
   SIGNAL L2_DATAOUT     : LC3B_OWORD;
   SIGNAL L2_MRESP_H     : std_logic;
   SIGNAL MREAD_L        : std_logic;
   SIGNAL MWRITE_L       : std_logic;
   SIGNAL PMADDRESS      : LC3B_WORD;
   SIGNAL PMDATAIN       : LC3B_OWORD;
   SIGNAL PMDATAOUT      : LC3B_OWORD;
   SIGNAL PMREAD_L       : STD_LOGIC;
   SIGNAL PMRESP_H       : STD_LOGIC;
   SIGNAL PMWRITE_L      : STD_LOGIC;


   -- Component Declarations
   COMPONENT Arbiter
   PORT (
      CLK          : IN     std_logic ;
      D_ADDRESS    : IN     LC3B_WORD ;
      D_DATAOUT    : IN     LC3B_OWORD ;
      D_MREAD_L    : IN     STD_LOGIC ;
      D_MWRITEL_L  : IN     STD_LOGIC ;
      I_ADDRESS    : IN     LC3B_WORD ;
      I_MREAD_L    : IN     std_logic ;
      L2_DATAIN    : IN     LC3B_OWORD ;
      L2_MRESP_H   : IN     std_logic ;
      RESET_L      : IN     std_logic ;
      D_DATAIN     : OUT    LC3B_OWORD ;
      D_L2_MRESP_H : OUT    std_logic ;
      I_DATAIN     : OUT    LC3B_OWORD ;
      I_L2_MRESP_H : OUT    std_logic ;
      L2_ADDRESS   : OUT    LC3B_WORD ;
      L2_DATAOUT   : OUT    LC3B_OWORD ;
      MREAD_L      : OUT    std_logic ;
      MWRITE_L     : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT DCache
   PORT (
      CLK            : IN     STD_LOGIC ;
      D_ADDRESS      : IN     LC3B_WORD ;
      D_DATAOUT      : IN     LC3B_WORD ;
      D_MREAD_L      : IN     STD_LOGIC ;
      D_MWRITEH_L    : IN     STD_LOGIC ;
      D_MWRITEL_L    : IN     STD_LOGIC ;
      D_PMDATAIN     : IN     LC3B_OWORD ;
      D_PMRESP_H     : IN     STD_LOGIC ;
      RESET_L        : IN     STD_LOGIC ;
      D_ADDRESS_pm   : OUT    LC3B_WORD ;
      D_DATAIN       : OUT    LC3B_WORD ;
      D_DATAOUT_pm   : OUT    LC3B_OWORD ;
      D_MREAD_pm_L   : OUT    STD_LOGIC ;
      D_MRESP_H      : OUT    STD_LOGIC ;
      D_MWRITEL_pm_L : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT ICache
   PORT (
      CLK          : IN     STD_LOGIC ;
      I_ADDRESS    : IN     LC3B_WORD ;
      I_MREAD_L    : IN     STD_LOGIC ;
      I_PMDATAIN   : IN     LC3B_OWORD ;
      I_PMRESP_H   : IN     STD_LOGIC ;
      RESET_L      : IN     STD_LOGIC ;
      I_ADDRESS_pm : OUT    LC3B_WORD ;
      I_DATAIN     : OUT    LC3B_WORD ;
      I_MREAD_pm_L : OUT    STD_LOGIC ;
      I_MRESP_H    : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT L2Cache
   PORT (
      CLK       : IN     std_logic ;
      L1ADDRESS : IN     LC3B_WORD ;
      L1DATAOUT : IN     LC3B_OWORD ;
      MREAD_L   : IN     std_logic ;
      MWRITE_L  : IN     std_logic ;
      PMDATAIN  : IN     LC3B_OWORD ;
      PMRESP_H  : IN     STD_LOGIC ;
      RESET_L   : IN     std_logic ;
      DataIn    : OUT    LC3B_OWORD ;
      MRESP_H   : OUT    std_logic ;
      PMADDRESS : OUT    LC3B_WORD ;
      PMDATAOUT : OUT    LC3B_OWORD ;
      PMREAD_L  : OUT    STD_LOGIC ;
      PMWRITE_L : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT PM_MP3
   PORT (
      clk       : IN     std_logic ;
      PMADDRESS : IN     LC3B_WORD ;
      PMDATAOUT : IN     LC3B_OWORD ;
      PMREAD_L  : IN     STD_LOGIC ;
      RESET_L   : IN     std_logic ;
      PMDATAIN  : OUT    LC3B_OWORD ;
      PMRESP_H  : OUT    STD_LOGIC ;
      PMWRITE_L : IN     STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Arbiter USE ENTITY ece411.Arbiter;
   FOR ALL : DCache USE ENTITY ece411.DCache;
   FOR ALL : ICache USE ENTITY ece411.ICache;
   FOR ALL : L2Cache USE ENTITY ece411.L2Cache;
   FOR ALL : PM_MP3 USE ENTITY ece411.PM_MP3;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   Arbiter_MP3 : Arbiter
      PORT MAP (
         CLK          => CLK,
         D_ADDRESS    => D_ADDRESS_pm,
         D_DATAOUT    => D_DATAOUT_pm,
         D_MREAD_L    => D_MREAD_pm_L,
         D_MWRITEL_L  => D_MWRITEL_pm_L,
         I_ADDRESS    => I_ADDRESS_pm,
         I_MREAD_L    => I_MREAD_pm_L,
         L2_DATAIN    => L2_DATAIN,
         L2_MRESP_H   => L2_MRESP_H,
         RESET_L      => RESET_L,
         D_DATAIN     => D_PMDATAIN,
         D_L2_MRESP_H => D_PMRESP_H,
         I_DATAIN     => I_PMDATAIN,
         I_L2_MRESP_H => I_PMRESP_H,
         L2_ADDRESS   => L2_ADDRESS,
         L2_DATAOUT   => L2_DATAOUT,
         MREAD_L      => MREAD_L,
         MWRITE_L     => MWRITE_L
      );
   mdCache : DCache
      PORT MAP (
         CLK            => CLK,
         D_ADDRESS      => D_ADDRESS,
         D_DATAOUT      => D_DATAOUT,
         D_MREAD_L      => D_MREAD_L,
         D_MWRITEH_L    => D_MWRITEH_L,
         D_MWRITEL_L    => D_MWRITEL_L,
         D_PMDATAIN     => D_PMDATAIN,
         D_PMRESP_H     => D_PMRESP_H,
         RESET_L        => RESET_L,
         D_ADDRESS_pm   => D_ADDRESS_pm,
         D_DATAIN       => D_DATAIN,
         D_DATAOUT_pm   => D_DATAOUT_pm,
         D_MREAD_pm_L   => D_MREAD_pm_L,
         D_MRESP_H      => D_MRESP_H,
         D_MWRITEL_pm_L => D_MWRITEL_pm_L
      );
   miCache : ICache
      PORT MAP (
         CLK          => CLK,
         I_ADDRESS    => I_ADDRESS,
         I_MREAD_L    => I_MREAD_L,
         I_PMDATAIN   => I_PMDATAIN,
         I_PMRESP_H   => I_PMRESP_H,
         RESET_L      => RESET_L,
         I_ADDRESS_pm => I_ADDRESS_pm,
         I_DATAIN     => I_DATAIN,
         I_MREAD_pm_L => I_MREAD_pm_L,
         I_MRESP_H    => I_MRESP_H
      );
   L2_Cache : L2Cache
      PORT MAP (
         CLK       => CLK,
         L1ADDRESS => L2_ADDRESS,
         L1DATAOUT => L2_DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITE_L  => MWRITE_L,
         PMDATAIN  => PMDATAIN,
         PMRESP_H  => PMRESP_H,
         RESET_L   => RESET_L,
         DataIn    => L2_DATAIN,
         MRESP_H   => L2_MRESP_H,
         PMADDRESS => PMADDRESS,
         PMDATAOUT => PMDATAOUT,
         PMREAD_L  => PMREAD_L,
         PMWRITE_L => PMWRITE_L
      );
   DRAM_MP3 : PM_MP3
      PORT MAP (
         clk       => CLK,
         PMADDRESS => PMADDRESS,
         PMDATAOUT => PMDATAOUT,
         PMREAD_L  => PMREAD_L,
         RESET_L   => RESET_L,
         PMDATAIN  => PMDATAIN,
         PMRESP_H  => PMRESP_H,
         PMWRITE_L => PMWRITE_L
      );

END struct;
