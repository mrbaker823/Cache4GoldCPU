-- VHDL Entity ece411.Cache_Datapath.symbol
--
-- Created:
--          by - baker30.ews (evrt-252-28.ews.illinois.edu)
--          at - 16:53:24 04/25/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Datapath IS
   PORT( 
      ADDRESS    : IN     LC3b_word;
      CacheWrite : IN     std_logic;
      DATAOUT    : IN     LC3b_word;
      Evict_H    : IN     std_logic;
      MREAD_L    : IN     std_logic;
      MWRITEH_L  : IN     std_logic;
      MWRITEL_L  : IN     std_logic;
      PMDATAIN   : IN     LC3B_OWORD;
      RESET_L    : IN     std_logic;
      clk        : IN     std_logic;
      DATAIN     : OUT    LC3b_word;
      DirtyOut   : OUT    std_logic;
      LRUOut     : OUT    std_logic;
      MRESP_H    : OUT    std_logic;
      PMADDRESS  : OUT    LC3B_WORD;
      PMDATAOUT  : OUT    LC3B_OWORD;
      hit        : OUT    std_logic
   );

-- Declarations

END Cache_Datapath ;

--
-- VHDL Architecture ece411.Cache_Datapath.struct
--
-- Created:
--          by - baker30.ews (evrt-252-28.ews.illinois.edu)
--          at - 16:53:24 04/25/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE struct OF Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL B              : std_logic;
   SIGNAL B1             : std_logic;
   SIGNAL BitOut         : std_logic;
   SIGNAL BitOut1        : std_logic;
   SIGNAL BitWrite       : std_logic;
   SIGNAL BuiltADDR      : LC3B_WORD;
   SIGNAL Comp0out       : std_logic;
   SIGNAL Comp1out       : std_logic;
   SIGNAL DATAINe        : LC3b_word;
   SIGNAL DATAOUT0       : LC3b_oword;
   SIGNAL DATAOUTBIG     : LC3B_OWORD;
   SIGNAL DataArrayIn    : LC3B_OWORD;
   SIGNAL DataOut1       : LC3B_OWORD;
   SIGNAL DataWrite0     : std_logic;
   SIGNAL DataWrite1     : std_logic;
   SIGNAL DirtyOut0      : std_logic;
   SIGNAL DirtyOut1      : std_logic;
   SIGNAL F              : std_logic;
   SIGNAL F1             : std_logic;
   SIGNAL F10            : std_logic;
   SIGNAL F11            : std_logic;
   SIGNAL F12            : std_logic;
   SIGNAL F13            : std_logic;
   SIGNAL F14            : std_logic;
   SIGNAL F2             : std_logic;
   SIGNAL F3             : std_logic;
   SIGNAL F4             : std_logic;
   SIGNAL F6             : std_logic;
   SIGNAL F7             : std_logic;
   SIGNAL F8             : std_logic;
   SIGNAL F9             : std_logic;
   SIGNAL INDEX          : LC3B_C_INDEX;
   SIGNAL LRUBitIn       : std_logic;
   SIGNAL LRUIndex       : LC3B_C_INDEX;
   SIGNAL Miss           : std_logic;
   SIGNAL NewDataArrayIn : LC3B_OWORD;
   SIGNAL Offset         : LC3B_C_OFFSET;
   SIGNAL Offset0        : std_logic;
   SIGNAL Offset3        : LC3B_8MUX_SEL;
   SIGNAL Sel            : std_logic;
   SIGNAL Tag            : LC3B_C_TAG;
   SIGNAL TagOld         : LC3B_C_TAG;
   SIGNAL TagOut0        : LC3B_C_TAG;
   SIGNAL TagOut1        : LC3B_C_TAG;
   SIGNAL ValidIn0       : std_logic;
   SIGNAL ValidIn1       : std_logic;
   SIGNAL dirtyIN        : std_logic;
   SIGNAL hitdelay       : std_logic;
   SIGNAL mDATAOUTBIG    : LC3b_oword;

   -- Implicit buffer signal declarations
   SIGNAL LRUOut_internal : std_logic;
   SIGNAL hit_internal    : std_logic;


   -- Component Declarations
   COMPONENT ADDRComb
   PORT (
      INDEX     : IN     LC3B_C_INDEX;
      TagOld    : IN     LC3B_C_TAG;
      BuiltADDR : OUT    LC3B_WORD
   );
   END COMPONENT;
   COMPONENT ADDRSplit
   PORT (
      ADDRESS : IN     LC3b_word;
      INDEX   : OUT    LC3B_C_INDEX;
      Offset  : OUT    LC3B_C_OFFSET;
      Offset0 : OUT    std_logic;
      Offset3 : OUT    LC3B_8MUX_SEL;
      Tag     : OUT    LC3B_C_TAG
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitArray
   PORT (
      BitIn    : IN     std_logic;
      BitWrite : IN     std_logic;
      Index    : IN     LC3B_C_INDEX;
      Reset_L  : IN     std_logic;
      BitOut   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT BitDelay
   PORT (
      inBit  : IN     std_logic;
      outBit : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT BitMux2
   PORT (
      A   : IN     std_logic ;
      B   : IN     std_logic ;
      Sel : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ByteCompar
   PORT (
      A : IN     lc3b_C_TAG ;
      B : IN     lc3b_C_TAG ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DAInput
   PORT (
      DATAOUT        : IN     LC3b_word ;
      MWRITEH_L      : IN     std_logic ;
      Offset         : IN     LC3B_C_OFFSET ;
      mDATAOUTBIG    : IN     LC3b_oword ;
      NewDataArrayIn : OUT    LC3B_OWORD 
   );
   END COMPONENT;
   COMPONENT DATASplitMux
   PORT (
      DATAOUTBIG : IN     LC3B_OWORD ;
      Offset3    : IN     LC3B_8MUX_SEL ;
      DATAINe    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT DataArray
   PORT (
      DataIn    : IN     LC3B_OWORD;
      DataWrite : IN     std_logic;
      Index     : IN     LC3B_C_INDEX;
      Reset_L   : IN     std_logic;
      DataOut   : OUT    LC3B_OWORD
   );
   END COMPONENT;
   COMPONENT NOT2
   PORT (
      A : IN     std_logic;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      A   : IN     LC3b_oword ;
      B   : IN     LC3b_oword ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT OddShifter
   PORT (
      DATAINe : IN     LC3b_word ;
      DATAIN  : OUT    LC3b_word ;
      Offset0 : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT TagArray
   PORT (
      Index    : IN     LC3B_C_INDEX;
      RESET_l  : IN     std_logic;
      TagIn    : IN     LC3B_C_TAG;
      TagWrite : IN     std_logic;
      TagOut   : OUT    LC3B_C_TAG
   );
   END COMPONENT;
   COMPONENT TagMux2
   PORT (
      A   : IN     LC3B_C_TAG ;
      B   : IN     LC3B_C_TAG ;
      Sel : IN     std_logic ;
      F   : OUT    LC3B_C_TAG 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADDRComb USE ENTITY ece411.ADDRComb;
   FOR ALL : ADDRSplit USE ENTITY ece411.ADDRSplit;
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : BitArray USE ENTITY ece411.BitArray;
   FOR ALL : BitDelay USE ENTITY ece411.BitDelay;
   FOR ALL : BitMux2 USE ENTITY ece411.BitMux2;
   FOR ALL : ByteCompar USE ENTITY ece411.ByteCompar;
   FOR ALL : DAInput USE ENTITY ece411.DAInput;
   FOR ALL : DATASplitMux USE ENTITY ece411.DATASplitMux;
   FOR ALL : DataArray USE ENTITY ece411.DataArray;
   FOR ALL : NOT2 USE ENTITY ece411.NOT2;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : OddShifter USE ENTITY ece411.OddShifter;
   FOR ALL : TagArray USE ENTITY ece411.TagArray;
   FOR ALL : TagMux2 USE ENTITY ece411.TagMux2;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 delayLRUBitIn
   LRUBitIn <= Comp0out after 5 ns;

   -- HDL Embedded Text Block 2 delayLRUIndex
   LRUIndex <= INDEX after 26 ns;


   -- ModuleWare code(v1.9) for instance 'U_1' of 'constval'
   ValidIn0 <= '1';

   -- ModuleWare code(v1.9) for instance 'U_2' of 'constval'
   ValidIn1 <= '1';

   -- Instance port mappings.
   aADDRComb : ADDRComb
      PORT MAP (
         INDEX     => INDEX,
         TagOld    => TagOld,
         BuiltADDR => BuiltADDR
      );
   aADDRSplit : ADDRSplit
      PORT MAP (
         ADDRESS => ADDRESS,
         Tag     => Tag,
         INDEX   => INDEX,
         Offset  => Offset,
         Offset3 => Offset3,
         Offset0 => Offset0
      );
   U_3 : AND2
      PORT MAP (
         A => Comp0out,
         B => BitOut,
         F => F
      );
   U_4 : AND2
      PORT MAP (
         A => Comp1out,
         B => BitOut1,
         F => F1
      );
   U_7 : AND2
      PORT MAP (
         A => hit_internal,
         B => F4,
         F => BitWrite
      );
   U_9 : AND2
      PORT MAP (
         A => CacheWrite,
         B => B,
         F => DataWrite1
      );
   U_10 : AND2
      PORT MAP (
         A => CacheWrite,
         B => F2,
         F => DataWrite0
      );
   U_11 : AND2
      PORT MAP (
         A => MREAD_L,
         B => MWRITEL_L,
         F => F11
      );
   U_16 : AND2
      PORT MAP (
         A => F10,
         B => Miss,
         F => F8
      );
   U_17 : AND2
      PORT MAP (
         A => F9,
         B => hit_internal,
         F => F7
      );
   U_18 : AND2
      PORT MAP (
         A => Comp1out,
         B => hit_internal,
         F => F3
      );
   U_19 : AND2
      PORT MAP (
         A => LRUOut_internal,
         B => Miss,
         F => F6
      );
   U_25 : AND2
      PORT MAP (
         A => hit_internal,
         B => B1,
         F => MRESP_H
      );
   LRUBit : BitArray
      PORT MAP (
         Reset_L  => RESET_L,
         BitWrite => BitWrite,
         Index    => LRUIndex,
         BitIn    => LRUBitIn,
         BitOut   => LRUOut_internal
      );
   dirtyBit0 : BitArray
      PORT MAP (
         RESET_l  => RESET_L,
         BitWrite => DataWrite0,
         Index    => INDEX,
         BitIn    => dirtyIN,
         BitOut   => DirtyOut0
      );
   dirtyBit1 : BitArray
      PORT MAP (
         Reset_L  => RESET_L,
         BitWrite => DataWrite1,
         Index    => INDEX,
         BitIn    => dirtyIN,
         BitOut   => DirtyOut1
      );
   validBit0 : BitArray
      PORT MAP (
         Reset_L  => RESET_L,
         BitWrite => DataWrite0,
         Index    => INDEX,
         BitIn    => ValidIn0,
         BitOut   => BitOut
      );
   validBit1 : BitArray
      PORT MAP (
         Reset_L  => RESET_L,
         BitWrite => DataWrite1,
         Index    => INDEX,
         BitIn    => ValidIn1,
         BitOut   => BitOut1
      );
   aBitDelay : BitDelay
      PORT MAP (
         inBit  => hit_internal,
         outBit => hitdelay
      );
   U_23 : BitMux2
      PORT MAP (
         A   => DirtyOut0,
         B   => DirtyOut1,
         Sel => LRUOut_internal,
         F   => DirtyOut
      );
   Comp0 : ByteCompar
      PORT MAP (
         A => TagOut0,
         B => Tag,
         F => Comp0out
      );
   Comp1 : ByteCompar
      PORT MAP (
         A => TagOut1,
         B => Tag,
         F => Comp1out
      );
   aDAI : DAInput
      PORT MAP (
         DATAOUT        => DATAOUT,
         MWRITEH_L      => MWRITEH_L,
         Offset         => Offset,
         mDATAOUTBIG    => mDATAOUTBIG,
         NewDataArrayIn => NewDataArrayIn
      );
   aDATAMux : DATASplitMux
      PORT MAP (
         DATAOUTBIG => DATAOUTBIG,
         Offset3    => Offset3,
         DATAINe    => DATAINe
      );
   aDataArray0 : DataArray
      PORT MAP (
         Reset_L   => RESET_L,
         DataWrite => DataWrite0,
         Index     => INDEX,
         DataIn    => DataArrayIn,
         DataOut   => DATAOUT0
      );
   aDataArray1 : DataArray
      PORT MAP (
         Reset_L   => RESET_L,
         DataWrite => DataWrite1,
         Index     => INDEX,
         DataIn    => DataArrayIn,
         DataOut   => DataOut1
      );
   U_8 : NOT2
      PORT MAP (
         A => LRUOut_internal,
         F => F10
      );
   U_12 : NOT2
      PORT MAP (
         A => Comp1out,
         F => F9
      );
   U_13 : NOT2
      PORT MAP (
         A => hit_internal,
         F => Miss
      );
   U_21 : NOT2
      PORT MAP (
         A => F11,
         F => F4
      );
   U_26 : NOT2
      PORT MAP (
         A => MWRITEL_L,
         F => Sel
      );
   U_27 : NOT2
      PORT MAP (
         A => MREAD_L,
         F => F12
      );
   U_28 : NOT2
      PORT MAP (
         A => MWRITEL_L,
         F => F13
      );
   U_29 : NOT2
      PORT MAP (
         A => MWRITEH_L,
         F => F14
      );
   U_5 : OR2
      PORT MAP (
         A => F,
         B => F1,
         F => hit_internal
      );
   U_14 : OR2
      PORT MAP (
         A => F8,
         B => F7,
         F => F2
      );
   U_15 : OR2
      PORT MAP (
         A => F3,
         B => F6,
         F => B
      );
   U_20 : OR2
      PORT MAP (
         A => F12,
         B => CacheWrite,
         F => B1
      );
   U_30 : OR2
      PORT MAP (
         A => F13,
         B => F14,
         F => dirtyIN
      );
   DOmux : OWordMux2
      PORT MAP (
         A   => PMDATAIN,
         B   => DATAOUTBIG,
         Sel => hit_internal,
         F   => mDATAOUTBIG
      );
   DataAInMux : OWordMux2
      PORT MAP (
         A   => PMDATAIN,
         B   => NewDataArrayIn,
         Sel => Sel,
         F   => DataArrayIn
      );
   U_0 : OWordMux2
      PORT MAP (
         A   => DATAOUT0,
         B   => DataOut1,
         Sel => Comp1out,
         F   => DATAOUTBIG
      );
   U_6 : OWordMux2
      PORT MAP (
         A   => DATAOUT0,
         B   => DataOut1,
         Sel => LRUOut_internal,
         F   => PMDATAOUT
      );
   oddShift : OddShifter
      PORT MAP (
         DATAINe => DATAINe,
         DATAIN  => DATAIN,
         Offset0 => Offset0
      );
   aTagArray0 : TagArray
      PORT MAP (
         RESET_l  => RESET_L,
         TagWrite => DataWrite0,
         Index    => INDEX,
         TagIn    => Tag,
         TagOut   => TagOut0
      );
   aTagArray1 : TagArray
      PORT MAP (
         Reset_L  => RESET_L,
         TagWrite => DataWrite1,
         Index    => INDEX,
         TagIn    => Tag,
         TagOut   => TagOut1
      );
   U_24 : TagMux2
      PORT MAP (
         A   => TagOut0,
         B   => TagOut1,
         Sel => LRUOut_internal,
         F   => TagOld
      );
   U_22 : WordMux2
      PORT MAP (
         A   => ADDRESS,
         B   => BuiltADDR,
         Sel => Evict_H,
         F   => PMADDRESS
      );

   -- Implicit buffered output assignments
   LRUOut <= LRUOut_internal;
   hit    <= hit_internal;

END struct;
