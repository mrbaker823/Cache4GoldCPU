-- VHDL Entity ece411.Cache_Controller.symbol
--
-- Created:
--          by - lachman1.ews (siebl-0220-04.ews.illinois.edu)
--          at - 03:13:53 04/26/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Controller IS
   PORT( 
      DirtyOut   : IN     std_logic;
      MREAD_L    : IN     std_logic;
      MWRITEL_L  : IN     std_logic;
      PMRESP_H   : IN     STD_LOGIC;
      RESET_L    : IN     std_logic;
      clk        : IN     std_logic;
      hit        : IN     std_logic;
      CacheWrite : OUT    std_logic;
      Evict_H    : OUT    std_logic;
      MissCount  : OUT    std_logic;
      PMREAD_L   : OUT    STD_LOGIC;
      PMWRITE_L  : OUT    STD_LOGIC
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - lachman1.ews (siebl-0220-04.ews.illinois.edu)
--          at - 03:13:53 04/26/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      checkHit,
      Mem2Ca,
      WriteCache,
      Evict
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      Reset_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (Reset_L = '0') THEN
         current_state <= checkHit;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      DirtyOut,
      MREAD_L,
      MWRITEL_L,
      PMRESP_H,
      current_state,
      hit
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN checkHit => 
            IF (HIT = '0' and DirtyOut = '0' and (MREAD_L = '0' or MWRITEL_L = '0')) THEN 
               next_state <= Mem2Ca;
            ELSIF (HIT = '0' and DirtyOut = '1' and (MREAD_L = '0' or MWRITEL_L = '0')) THEN 
               next_state <= Evict;
            ELSIF (MWRITEL_L = '0') THEN 
               next_state <= WriteCache;
            ELSE
               next_state <= checkHit;
            END IF;
         WHEN Mem2Ca => 
            IF (PMRESP_H = '1') THEN 
               next_state <= WriteCache;
            ELSE
               next_state <= Mem2Ca;
            END IF;
         WHEN WriteCache => 
            IF (HIT = '1') THEN 
               next_state <= checkHit;
            ELSE
               next_state <= WriteCache;
            END IF;
         WHEN Evict => 
            IF (PMRESP_H = '1') THEN 
               next_state <= Mem2Ca;
            ELSE
               next_state <= Evict;
            END IF;
         WHEN OTHERS =>
            next_state <= checkHit;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      CacheWrite <= '0';
      Evict_H <= '0';
      MissCount <= '0';
      PMREAD_L <= '1';
      PMWRITE_L <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN Mem2Ca => 
            Evict_H <= '0';
            PMREAD_L <= '0' after 6 ns ;
            MissCount <= '1';
         WHEN WriteCache => 
            CacheWrite <= '1';
         WHEN Evict => 
            Evict_H <= '1';
            PMWRITE_L <= '0' after 6ns;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
