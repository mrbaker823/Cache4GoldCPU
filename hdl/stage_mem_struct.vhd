-- VHDL Entity ece411.Stage_mem.interface
--
-- Created:
--          by - baker30.ews (evrt-252-28.ews.illinois.edu)
--          at - 18:50:43 04/25/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Stage_mem IS
   PORT( 
      CLK              : IN     STD_LOGIC;
      D_DATAIN         : IN     LC3B_WORD;
      Mem_ALU_In       : IN     LC3B_WORD;
      RESET_L          : IN     STD_LOGIC;
      d_mresp_h        : IN     STD_LOGIC;
      mem_IR_in        : IN     LC3B_WORD;
      mem_REGb_in      : IN     LC3B_WORD;
      mem_ZEXT8_in     : IN     LC3B_WORD;
      mem_controls_in  : IN     CONTROL_WORD;
      D_ADDRESS        : OUT    LC3B_WORD;
      D_DATAOUT        : OUT    LC3B_WORD;
      D_MREAD_L        : OUT    STD_LOGIC;
      D_MWRITEH_L      : OUT    STD_LOGIC;
      D_MWRITEL_L      : OUT    STD_LOGIC;
      ldi              : OUT    STD_LOGIC;
      mem_BTBWrite_out : OUT    STD_LOGIC;
      mem_DATAIN_out   : OUT    LC3B_WORD;
      mem_Opcode_out   : OUT    LC3b_OPCODE;
      mem_RegWrite_out : OUT    STD_LOGIC;
      sti              : OUT    STD_LOGIC
   );

-- Declarations

END Stage_mem ;

--
-- VHDL Architecture ece411.Stage_mem.struct
--
-- Created:
--          by - baker30.ews (evrt-252-28.ews.illinois.edu)
--          at - 18:50:43 04/25/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Stage_mem IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A         : LC3b_word;
   SIGNAL LDIMuxSel : std_logic;
   SIGNAL LoadMAR   : std_logic;
   SIGNAL MARMUXSel : std_logic;
   SIGNAL alumuxsel : LC3B_4MUX_SEL;
   SIGNAL c_read    : STD_LOGIC;
   SIGNAL c_writeH  : STD_LOGIC;
   SIGNAL c_writeL  : STD_LOGIC;
   SIGNAL dout      : std_logic;
   SIGNAL dout1     : std_logic;
   SIGNAL dout2     : std_logic;
   SIGNAL mem_mresp : std_logic;
   SIGNAL state     : STD_LOGIC;

   -- Implicit buffer signal declarations
   SIGNAL ldi_internal : STD_LOGIC;
   SIGNAL sti_internal : STD_LOGIC;


   -- Component Declarations
   COMPONENT BitMux2
   PORT (
      A   : IN     std_logic ;
      B   : IN     std_logic ;
      Sel : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DOut_conn
   PORT (
      mem_ALU_in : IN     LC3B_WORD;
      D_DATAOUT  : OUT    LC3B_WORD
   );
   END COMPONENT;
   COMPONENT D_Latch
   PORT (
      Data_In  : IN     lc3b_word ;
      Enable   : IN     std_logic ;
      data_out : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT Evener
   PORT (
      CLK        : IN     STD_LOGIC ;
      alumuxsel  : IN     LC3B_4MUX_SEL ;
      mem_ALU_in : IN     LC3B_WORD ;
      A          : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT IRStrip
   PORT (
      CLK            : IN     STD_LOGIC ;
      mem_IR_in      : IN     LC3B_WORD ;
      mem_Opcode_out : OUT    LC3b_OPCODE 
   );
   END COMPONENT;
   COMPONENT mem_controlStrip
   PORT (
      CLK              : IN     std_logic;
      RESET_L          : IN     std_logic;
      mem_controls_in  : IN     CONTROL_WORD;
      mresp            : IN     std_logic;
      D_MWRITEH_L      : OUT    STD_LOGIC;
      D_MWRITEL_L      : OUT    STD_LOGIC;
      LDIMuxSel        : OUT    STD_LOGIC;
      LoadMAR          : OUT    std_logic;
      MARMUXSel        : OUT    std_logic;
      alumuxsel        : OUT    LC3B_4MUX_SEL;
      d_MREAD_L        : OUT    STD_LOGIC;
      ldi              : OUT    STD_LOGIC;
      mem_BTBWrite_out : OUT    STD_LOGIC;
      mem_RegWrite_out : OUT    STD_LOGIC;
      sti              : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT mem_resp_gen
   PORT (
      CLK       : IN     STD_LOGIC ;
      d_mresp_h : IN     STD_LOGIC ;
      ldi       : IN     STD_LOGIC ;
      state     : IN     STD_LOGIC ;
      sti       : IN     STD_LOGIC ;
      mem_mresp : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BitMux2 USE ENTITY ece411.BitMux2;
   FOR ALL : DOut_conn USE ENTITY ece411.DOut_conn;
   FOR ALL : D_Latch USE ENTITY ece411.D_Latch;
   FOR ALL : Evener USE ENTITY ece411.Evener;
   FOR ALL : IRStrip USE ENTITY ece411.IRStrip;
   FOR ALL : mem_controlStrip USE ENTITY ece411.mem_controlStrip;
   FOR ALL : mem_resp_gen USE ENTITY ece411.mem_resp_gen;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.9) for instance 'U_6' of 'constval'
   dout <= '1';

   -- ModuleWare code(v1.9) for instance 'U_7' of 'constval'
   dout1 <= '1';

   -- ModuleWare code(v1.9) for instance 'U_8' of 'constval'
   dout2 <= '1';

   -- Instance port mappings.
   U_9 : BitMux2
      PORT MAP (
         A   => c_read,
         B   => dout,
         Sel => d_mresp_h,
         F   => D_MREAD_L
      );
   U_10 : BitMux2
      PORT MAP (
         A   => c_writeL,
         B   => dout1,
         Sel => d_mresp_h,
         F   => D_MWRITEL_L
      );
   U_11 : BitMux2
      PORT MAP (
         A   => c_writeH,
         B   => dout2,
         Sel => d_mresp_h,
         F   => D_MWRITEH_L
      );
   U_4 : DOut_conn
      PORT MAP (
         mem_ALU_in => mem_REGb_in,
         D_DATAOUT  => D_DATAOUT
      );
   MAR : D_Latch
      PORT MAP (
         Data_In  => A,
         Enable   => LoadMAR,
         data_out => D_ADDRESS
      );
   U_12 : D_Latch
      PORT MAP (
         Data_In  => D_DATAIN,
         Enable   => d_mresp_h,
         data_out => mem_DATAIN_out
      );
   U_3 : Evener
      PORT MAP (
         CLK        => CLK,
         Mem_ALU_In => Mem_ALU_In,
         alumuxsel  => alumuxsel,
         A          => A
      );
   U_0 : IRStrip
      PORT MAP (
         CLK            => CLK,
         mem_IR_in      => mem_IR_in,
         mem_Opcode_out => mem_Opcode_out
      );
   U_2 : mem_controlStrip
      PORT MAP (
         mem_controls_in  => mem_controls_in,
         RESET_L          => RESET_L,
         CLK              => CLK,
         mresp            => d_mresp_h,
         MARMUXSel        => MARMUXSel,
         LoadMAR          => LoadMAR,
         D_MWRITEH_L      => c_writeH,
         D_MWRITEL_L      => c_writeL,
         d_MREAD_L        => c_read,
         LDIMuxSel        => LDIMuxSel,
         ldi              => ldi_internal,
         sti              => sti_internal,
         mem_BTBWrite_out => mem_BTBWrite_out,
         alumuxsel        => alumuxsel,
         mem_RegWrite_out => mem_RegWrite_out
      );
   U_13 : mem_resp_gen
      PORT MAP (
         CLK       => CLK,
         d_mresp_h => d_mresp_h,
         ldi       => ldi_internal,
         state     => state,
         sti       => sti_internal,
         mem_mresp => mem_mresp
      );

   -- Implicit buffered output assignments
   ldi <= ldi_internal;
   sti <= sti_internal;

END struct;
