-- VHDL Entity ece411.Cache_Datapath.interface
--
-- Created:
--          by - baker30.ews (linux5.ews.illinois.edu)
--          at - 23:42:43 02/21/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Datapath IS
   PORT( 
      ADDRESS     : IN     LC3b_word;
      CacheWrite  : IN     std_logic;
      DATAOUT     : IN     LC3b_word;
      DirtyIn0    : IN     std_logic;
      DirtyIn1    : IN     std_logic;
      DirtyWrite0 : IN     std_logic;
      DirtyWrite1 : IN     std_logic;
      MREAD_L     : IN     std_logic;
      MWRITEH_L   : IN     std_logic;
      MWRITEL_L   : IN     std_logic;
      PMDATAIN    : IN     LC3B_OWORD;
      Reset_L     : IN     std_logic;
      clk         : IN     std_logic;
      DATAIN      : OUT    LC3b_word;
      DirtyOut0   : OUT    std_logic;
      DirtyOut1   : OUT    std_logic;
      HIT         : OUT    std_logic;
      LRUout      : OUT    std_logic;
      MRESP_H     : OUT    std_logic;
      PMADDRESS   : OUT    LC3B_WORD;
      PMDATAOUT   : OUT    LC3B_OWORD
   );

-- Declarations

END Cache_Datapath ;

--
-- VHDL Architecture ece411.Cache_Datapath.struct
--
-- Created:
--          by - baker30.ews (linux5.ews.illinois.edu)
--          at - 23:42:43 02/21/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE struct OF Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A           : std_logic;
   SIGNAL BitOut      : std_logic;
   SIGNAL BitOut1     : std_logic;
   SIGNAL DATAOUT0    : LC3b_word;
   SIGNAL DATAOUTBIG  : LC3b_oword;
   SIGNAL DataOut1    : LC3B_OWORD;
   SIGNAL DataWrite0  : std_logic;
   SIGNAL DataWrite1  : std_logic;
   SIGNAL F           : std_logic;
   SIGNAL F1          : std_logic;
   SIGNAL F2          : std_logic;
   SIGNAL F3          : std_logic;
   SIGNAL Index       : LC3B_C_INDEX;
   SIGNAL Offset      : LC3B_C_OFFSET;
   SIGNAL Tag         : LC3B_C_TAG;
   SIGNAL TagOut      : LC3B_C_TAG;
   SIGNAL TagOut1     : LC3B_C_TAG;
   SIGNAL ValidIn0    : std_logic;
   SIGNAL ValidIn1    : std_logic;
   SIGNAL ValidWrite0 : std_logic;
   SIGNAL ValidWrite1 : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL HIT_internal    : std_logic;
   SIGNAL LRUout_internal : std_logic;


   -- Component Declarations
   COMPONENT ADDRSplit
   PORT (
      ADDRESS : IN     LC3b_word ;
      Tag     : OUT    LC3B_C_TAG ;
      Index   : OUT    LC3B_C_INDEX ;
      Offset  : OUT    LC3B_C_OFFSET 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitArray
   PORT (
      BitIn    : IN     std_logic;
      BitWrite : IN     std_logic;
      Index    : IN     LC3B_C_INDEX;
      Reset_L  : IN     std_logic;
      BitOut   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT ByteCompar
   PORT (
      A : IN     lc3b_C_TAG ;
      B : IN     lc3b_C_TAG ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DATASplitMux
   PORT (
      DATAOUTBIG : IN     LC3b_oword ;
      Offset     : IN     LC3B_C_OFFSET ;
      DATAIN     : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT DataArray
   PORT (
      DataIn    : IN     LC3B_OWORD;
      DataWrite : IN     std_logic;
      Index     : IN     LC3B_C_INDEX;
      Reset_L   : IN     std_logic;
      DataOut   : OUT    LC3B_OWORD
   );
   END COMPONENT;
   COMPONENT JoinLogic
   PORT (
      HIT     : IN     std_logic ;
      MRESP_H : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT JoinWord
   PORT (
      ADDRESS   : IN     LC3b_word ;
      PMADDRESS : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT NOT2
   PORT (
      A : IN     std_logic;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      A   : IN     LC3b_oword ;
      B   : IN     LC3b_oword ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT TagArray
   PORT (
      Index    : IN     LC3B_C_INDEX;
      RESET_l  : IN     std_logic;
      TagIn    : IN     LC3B_C_TAG;
      TagWrite : IN     std_logic;
      TagOut   : OUT    LC3B_C_TAG
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADDRSplit USE ENTITY ece411.ADDRSplit;
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : BitArray USE ENTITY ece411.BitArray;
   FOR ALL : ByteCompar USE ENTITY ece411.ByteCompar;
   FOR ALL : DATASplitMux USE ENTITY ece411.DATASplitMux;
   FOR ALL : DataArray USE ENTITY ece411.DataArray;
   FOR ALL : JoinLogic USE ENTITY ece411.JoinLogic;
   FOR ALL : JoinWord USE ENTITY ece411.JoinWord;
   FOR ALL : NOT2 USE ENTITY ece411.NOT2;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : TagArray USE ENTITY ece411.TagArray;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.9) for instance 'U_1' of 'constval'
   ValidIn0 <= '1';

   -- ModuleWare code(v1.9) for instance 'U_2' of 'constval'
   ValidIn1 <= '1';

   -- Instance port mappings.
   aADDRSplit : ADDRSplit
      PORT MAP (
         ADDRESS => ADDRESS,
         Tag     => Tag,
         Index   => Index,
         Offset  => Offset
      );
   U_3 : AND2
      PORT MAP (
         A => A,
         B => BitOut,
         F => F
      );
   U_4 : AND2
      PORT MAP (
         A => F2,
         B => BitOut1,
         F => F1
      );
   U_9 : AND2
      PORT MAP (
         A => CacheWrite,
         B => F3,
         F => DataWrite1
      );
   U_10 : AND2
      PORT MAP (
         A => CacheWrite,
         B => LRUout_internal,
         F => DataWrite0
      );
   LRUBit : BitArray
      PORT MAP (
         Reset_L  => Reset_L,
         BitWrite => HIT_internal,
         Index    => Index,
         BitIn    => F2,
         BitOut   => LRUout_internal
      );
   dirtyBit0 : BitArray
      PORT MAP (
         RESET_l  => Reset_L,
         BitWrite => DirtyWrite0,
         Index    => Index,
         BitIn    => DirtyIn0,
         BitOut   => DirtyOut0
      );
   dirtyBit1 : BitArray
      PORT MAP (
         Reset_L  => Reset_L,
         BitWrite => DirtyWrite1,
         Index    => Index,
         BitIn    => DirtyIn1,
         BitOut   => DirtyOut1
      );
   validBit0 : BitArray
      PORT MAP (
         Reset_L  => Reset_L,
         BitWrite => ValidWrite0,
         Index    => Index,
         BitIn    => ValidIn0,
         BitOut   => BitOut
      );
   validBit1 : BitArray
      PORT MAP (
         Reset_L  => Reset_L,
         BitWrite => ValidWrite1,
         Index    => Index,
         BitIn    => ValidIn1,
         BitOut   => BitOut1
      );
   Comp0 : ByteCompar
      PORT MAP (
         A => TagOut,
         B => Tag,
         F => A
      );
   Comp1 : ByteCompar
      PORT MAP (
         A => TagOut1,
         B => Tag,
         F => F2
      );
   aDATAMux : DATASplitMux
      PORT MAP (
         DATAOUTBIG => DATAOUTBIG,
         Offset     => Offset,
         DATAIN     => DATAIN
      );
   aDataArray0 : DataArray
      PORT MAP (
         Reset_L   => Reset_L,
         DataWrite => DataWrite0,
         Index     => Index,
         DataIn    => PMDATAIN,
         DataOut   => DATAOUT0
      );
   aDataArray1 : DataArray
      PORT MAP (
         Reset_L   => Reset_L,
         DataWrite => DataWrite1,
         Index     => Index,
         DataIn    => PMDATAIN,
         DataOut   => DataOut1
      );
   HITMRH : JoinLogic
      PORT MAP (
         HIT     => HIT_internal,
         MRESP_H => MRESP_H
      );
   Addresses : JoinWord
      PORT MAP (
         ADDRESS   => ADDRESS,
         PMADDRESS => PMADDRESS
      );
   U_8 : NOT2
      PORT MAP (
         A => LRUout_internal,
         F => F3
      );
   U_5 : OR2
      PORT MAP (
         A => F,
         B => F1,
         F => HIT_internal
      );
   U_0 : OWordMux2
      PORT MAP (
         A   => DATAOUT0,
         B   => DataOut1,
         Sel => F2,
         F   => DATAOUTBIG
      );
   U_6 : OWordMux2
      PORT MAP (
         A   => DataOut1,
         B   => DATAOUT0,
         Sel => LRUout_internal,
         F   => PMDATAOUT
      );
   aTagArray0 : TagArray
      PORT MAP (
         RESET_l  => Reset_L,
         TagWrite => DataWrite0,
         Index    => Index,
         TagIn    => Tag,
         TagOut   => TagOut
      );
   aTagArray1 : TagArray
      PORT MAP (
         Reset_L  => Reset_L,
         TagWrite => DataWrite1,
         Index    => Index,
         TagIn    => Tag,
         TagOut   => TagOut1
      );

   -- Implicit buffered output assignments
   HIT    <= HIT_internal;
   LRUout <= LRUout_internal;

END struct;
