-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - baker30.ews (linux5.ews.illinois.edu)
--          at - 23:23:37 02/21/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel  : IN     lc3b_4mux_sel;
      ALUop      : IN     LC3b_aluop;
      DATAIN     : IN     LC3b_word;
      DESMuxSel  : IN     std_logic;
      LoadIR     : IN     std_logic;
      LoadMAR    : IN     std_logic;
      LoadMDR    : IN     std_logic;
      LoadNZP    : IN     std_logic;
      LoadPC     : IN     std_logic;
      MARMuxSel  : IN     lc3b_4mux_sel;
      MDRMuxSel  : IN     std_logic;
      PCAddrSel  : IN     std_logic;
      PCMuxSel   : IN     lc3b_4mux_sel;
      RESET_l    : IN     std_logic;
      RFMuxSel   : IN     lc3b_4mux_sel;
      RegWrite   : IN     std_logic;
      StoreSR    : IN     std_logic;
      ZEXTMuxSel : IN     std_logic;
      clk        : IN     std_logic;
      ADDRESS    : OUT    LC3b_word;
      CheckN     : OUT    std_logic;
      CheckP     : OUT    std_logic;
      CheckZ     : OUT    std_logic;
      DATAOUT    : OUT    LC3b_word;
      IRout      : OUT    LC3b_word;
      Opcode     : OUT    LC3b_opcode;
      n          : OUT    std_logic;
      p          : OUT    std_logic;
      z          : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - baker30.ews (linux5.ews.illinois.edu)
--          at - 23:23:39 02/21/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ6out     : LC3b_word;
   SIGNAL ADJ9out     : LC3b_word;
   SIGNAL ALUMuxout   : LC3b_word;
   SIGNAL ALUout      : LC3b_word;
   SIGNAL BRaddout    : LC3b_word;
   SIGNAL GenCCout    : LC3b_cc;
   SIGNAL IMM5out     : LC3b_word;
   SIGNAL MARMuxout   : LC3b_word;
   SIGNAL MDRMuxout   : LC3b_word;
   SIGNAL MDRout      : LC3b_word;
   SIGNAL PCAddrout   : LC3b_word;
   SIGNAL PCMuxout    : LC3b_word;
   SIGNAL PCPlus2out  : LC3b_word;
   SIGNAL PCout       : LC3b_word;
   SIGNAL RFAout      : LC3b_word;
   SIGNAL RFBout      : LC3b_word;
   SIGNAL RFMuxout    : LC3b_word;
   SIGNAL SEXT11out   : LC3b_word;
   SIGNAL SEXT6out    : lc3b_word;
   SIGNAL SrcA        : LC3b_reg;
   SIGNAL SrcB        : LC3b_reg;
   SIGNAL StoreMuxout : LC3b_reg;
   SIGNAL TRAPVect8   : LC3b_TRAPVECT8;
   SIGNAL TRAPout     : lc3b_word;
   SIGNAL ZEXTMuxout  : LC3b_word;
   SIGNAL ZEXTout     : LC3b_word;
   SIGNAL dest        : LC3b_reg;
   SIGNAL destout     : LC3b_reg;
   SIGNAL imm5in      : LC3b_imm5;
   SIGNAL index6      : LC3b_index6;
   SIGNAL offset11    : LC3b_offset11;
   SIGNAL offset9     : LC3b_offset9;


   -- Component Declarations
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      PCAddrout : IN     LC3b_word ;
      PCout     : IN     LC3b_word ;
      clk       : IN     std_logic ;
      BRaddout  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT DESMux
   PORT (
      DESMuxSel : IN     std_logic ;
      clk       : IN     std_logic ;
      dest      : IN     LC3b_reg ;
      destout   : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IMM5
   PORT (
      clk     : IN     std_logic ;
      imm5in  : IN     LC3b_imm5 ;
      IMM5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR    : IN     std_logic ;
      clk       : IN     std_logic ;
      Opcode    : OUT    LC3b_opcode ;
      SrcA      : OUT    LC3b_reg ;
      SrcB      : OUT    LC3b_reg ;
      index6    : OUT    LC3b_index6 ;
      offset9   : OUT    LC3b_offset9 ;
      offset11  : OUT    LC3b_offset11 ;
      IRout     : OUT    LC3b_word ;
      imm5in    : OUT    LC3b_imm5 ;
      dest      : OUT    LC3b_reg ;
      TRAPVect8 : OUT    LC3b_TRAPVECT8 ;
      MDRout    : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPSplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_l     : IN     std_logic ;
      RFMuxout    : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      destout     : IN     LC3b_reg ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SEXT11
   PORT (
      clk       : IN     std_logic ;
      offset11  : IN     LC3b_offset11 ;
      SEXT11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      clk      : IN     std_logic ;
      index6   : IN     LC3b_index6 ;
      SEXT6out : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      StoreMuxout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     lc3b_word ;
      B   : IN     lc3b_word ;
      C   : IN     lc3b_word ;
      D   : IN     lc3b_word ;
      Sel : IN     lc3b_4mux_sel ;
      F   : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT8
   PORT (
      MDRout  : IN     LC3b_word ;
      clk     : IN     std_logic ;
      ZEXTout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXTADJ
   PORT (
      TRAPVect8 : IN     LC3b_TRAPVECT8 ;
      clk       : IN     std_logic ;
      TRAPout   : OUT    lc3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : DESMux USE ENTITY ece411.DESMux;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IMM5 USE ENTITY ece411.IMM5;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPSplit USE ENTITY ece411.NZPSplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : SEXT11 USE ENTITY ece411.SEXT11;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : ZEXT8 USE ENTITY ece411.ZEXT8;
   FOR ALL : ZEXTADJ USE ENTITY ece411.ZEXTADJ;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- Dataout = MDRout
   DATAOUT <= MDRout;                                        


   -- Instance port mappings.
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         PCAddrout => PCAddrout,
         PCout     => PCout,
         clk       => clk,
         BRaddout  => BRaddout
      );
   aDESMux : DESMux
      PORT MAP (
         DESMuxSel => DESMuxSel,
         clk       => clk,
         dest      => dest,
         destout   => destout
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIMM5 : IMM5
      PORT MAP (
         clk     => clk,
         imm5in  => imm5in,
         IMM5out => IMM5out
      );
   aIR : IR
      PORT MAP (
         LoadIR    => LoadIR,
         clk       => clk,
         Opcode    => Opcode,
         SrcA      => SrcA,
         SrcB      => SrcB,
         index6    => index6,
         offset9   => offset9,
         offset11  => offset11,
         IRout     => IRout,
         imm5in    => imm5in,
         dest      => dest,
         TRAPVect8 => TRAPVect8,
         MDRout    => MDRout
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPSplit : NZPSplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_l,
         clk    => clk,
         load   => LoadMAR,
         Output => ADDRESS
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_l,
         clk    => clk,
         load   => LoadMDR,
         Output => MDRout
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxout,
         RESET  => RESET_l,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_l     => RESET_l,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         destout     => destout,
         RFAout      => RFAout,
         RFBout      => RFBout
      );
   aSEXT11 : SEXT11
      PORT MAP (
         clk       => clk,
         offset11  => offset11,
         SEXT11out => SEXT11out
      );
   aSEXT6 : SEXT6
      PORT MAP (
         clk      => clk,
         index6   => index6,
         SEXT6out => SEXT6out
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         dest        => dest,
         StoreMuxout => StoreMuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   PCAdderMux : WordMux2
      PORT MAP (
         A   => ADJ9out,
         B   => SEXT11out,
         Sel => PCAddrSel,
         F   => PCAddrout
      );
   ZEXTMux : WordMux2
      PORT MAP (
         A   => MDRout,
         B   => ZEXTout,
         Sel => ZEXTMuxSel,
         F   => ZEXTMuxout
      );
   ALUMux : WordMux4
      PORT MAP (
         A   => RFBout,
         B   => ADJ6out,
         C   => IMM5out,
         D   => SEXT6out,
         Sel => ALUMuxSel,
         F   => ALUMuxout
      );
   MARMux1 : WordMux4
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         C   => MDRout,
         D   => TRAPout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   PCMux : WordMux4
      PORT MAP (
         A   => PCPlus2out,
         B   => BRaddout,
         C   => ALUout,
         D   => MDRout,
         Sel => PCMuxSel,
         F   => PCMuxout
      );
   RFMux : WordMux4
      PORT MAP (
         A   => ZEXTMuxout,
         B   => ALUout,
         C   => BRaddout,
         D   => PCout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   aZEXT8 : ZEXT8
      PORT MAP (
         MDRout  => MDRout,
         clk     => clk,
         ZEXTout => ZEXTout
      );
   aZEXTADJ : ZEXTADJ
      PORT MAP (
         TRAPVect8 => TRAPVect8,
         clk       => clk,
         TRAPout   => TRAPout
      );

END struct;
