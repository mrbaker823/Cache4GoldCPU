-- VHDL Entity ece411.Branch_unit.symbol
--
-- Created:
--          by - baker30.ews (evrt-252-23.ews.illinois.edu)
--          at - 15:00:21 04/30/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Branch_unit IS
   PORT( 
      AddrIn  : IN     LC3b_word;
      BHTIn   : IN     LC3b_BR_BHT;
      Bwrite  : IN     std_logic;
      CondIn  : IN     std_logic;
      Raddr1  : IN     LC3b_word;
      Reset_L : IN     std_logic;
      Waddr   : IN     LC3b_word;
      AddrOut : OUT    LC3b_word;
      BHTOut  : OUT    LC3b_BR_BHT;
      CondOut : OUT    std_logic;
      Hit     : OUT    std_logic
   );

-- Declarations

END Branch_unit ;

--
-- VHDL Architecture ece411.Branch_unit.struct
--
-- Created:
--          by - baker30.ews (evrt-252-23.ews.illinois.edu)
--          at - 15:00:24 04/30/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF Branch_unit IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL B             : std_logic;
   SIGNAL BitOut        : std_logic;
   SIGNAL BitOut1       : std_logic;
   SIGNAL DataOut2      : LC3b_word;
   SIGNAL DataOut3      : LC3b_word;
   SIGNAL DataOut4      : LC3b_BR_BHT;
   SIGNAL DataOut5      : LC3b_BR_BHT;
   SIGNAL F             : STD_LOGIC;
   SIGNAL F2            : std_logic;
   SIGNAL F3            : std_logic;
   SIGNAL F6            : std_logic;
   SIGNAL F7            : std_logic;
   SIGNAL F8            : std_logic;
   SIGNAL LRUOut        : std_logic;
   SIGNAL RComp0out     : std_logic;
   SIGNAL RComp1out     : std_logic;
   SIGNAL RDataOut0     : LC3B_BR_TAG;
   SIGNAL RDataOut1     : LC3B_BR_TAG;
   SIGNAL RESET_DELAYED : std_logic;
   SIGNAL RIndex        : LC3B_C_INDEX;
   SIGNAL RTag          : LC3B_BR_TAG;
   SIGNAL WComp0out     : std_logic;
   SIGNAL WComp1out     : std_logic;
   SIGNAL WDataOut0     : LC3B_BR_TAG;
   SIGNAL WDataOut1     : LC3B_BR_TAG;
   SIGNAL WHit          : std_logic;
   SIGNAL WIndex        : LC3B_C_INDEX;
   SIGNAL WTag          : LC3B_BR_TAG;
   SIGNAL Waddr1        : LC3b_word;
   SIGNAL Write0        : std_logic;
   SIGNAL Write1        : std_logic;
   SIGNAL clk           : std_logic;
   SIGNAL miss          : STD_LOGIC;


   -- Component Declarations
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitMux2
   PORT (
      A   : IN     std_logic ;
      B   : IN     std_logic ;
      Sel : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Compare13
   PORT (
      A : IN     lc3b_BR_TAG;
      B : IN     lc3b_BR_TAG;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT MINUS2
   PORT (
      PCout         : IN     LC3b_word;
      RESET_DELAYED : IN     std_logic;
      clk           : IN     std_logic;
      PCPlus2out    : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT PCSplitter
   PORT (
      PC    : IN     LC3b_word;
      INDEX : OUT    LC3B_C_INDEX;
      Tag   : OUT    LC3B_BR_TAG
   );
   END COMPONENT;
   COMPONENT RWBRTagArray
   PORT (
      DataIn   : IN     LC3B_BR_TAG;
      RIndex   : IN     LC3B_C_INDEX;
      Reset_L  : IN     std_logic;
      WIndex   : IN     LC3B_C_INDEX;
      Write    : IN     std_logic;
      RDataOut : OUT    LC3B_BR_TAG;
      WDataOut : OUT    LC3B_BR_TAG
   );
   END COMPONENT;
   COMPONENT RWBitArray
   PORT (
      BitIn    : IN     std_logic;
      BitWrite : IN     std_logic;
      RIndex   : IN     LC3B_C_INDEX;
      Reset_L  : IN     std_logic;
      WIndex   : IN     LC3B_C_INDEX;
      BitOut   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT RWTwoBitArray
   PORT (
      DataIn  : IN     LC3B_BR_BHT;
      RIndex  : IN     LC3B_C_INDEX;
      Reset_L : IN     std_logic;
      WIndex  : IN     LC3B_C_INDEX;
      Write   : IN     std_logic;
      DataOut : OUT    LC3B_BR_BHT
   );
   END COMPONENT;
   COMPONENT RWWordArray
   PORT (
      DataIn  : IN     LC3B_WORD;
      RIndex  : IN     LC3B_C_INDEX;
      Reset_L : IN     std_logic;
      WIndex  : IN     LC3B_C_INDEX;
      Write   : IN     std_logic;
      DataOut : OUT    LC3B_WORD
   );
   END COMPONENT;
   COMPONENT TwoBitMux2
   PORT (
      A   : IN     LC3b_BR_BHT;
      B   : IN     LC3b_BR_BHT;
      Sel : IN     std_logic;
      F   : OUT    LC3b_BR_BHT
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NOR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : BitMux2 USE ENTITY ece411.BitMux2;
   FOR ALL : Compare13 USE ENTITY ece411.Compare13;
   FOR ALL : MINUS2 USE ENTITY ece411.MINUS2;
   FOR ALL : NOR2 USE ENTITY mp3lib.NOR2;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : PCSplitter USE ENTITY ece411.PCSplitter;
   FOR ALL : RWBRTagArray USE ENTITY ece411.RWBRTagArray;
   FOR ALL : RWBitArray USE ENTITY ece411.RWBitArray;
   FOR ALL : RWTwoBitArray USE ENTITY ece411.RWTwoBitArray;
   FOR ALL : RWWordArray USE ENTITY ece411.RWWordArray;
   FOR ALL : TwoBitMux2 USE ENTITY ece411.TwoBitMux2;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.9) for instance 'U_7' of 'constval'
   RESET_DELAYED <= '1';

   -- Instance port mappings.
   U_9 : AND2
      PORT MAP (
         A => Bwrite,
         B => B,
         F => Write1
      );
   U_10 : AND2
      PORT MAP (
         A => F2,
         B => Bwrite,
         F => Write0
      );
   U_17 : AND2
      PORT MAP (
         A => F,
         B => WHit,
         F => F7
      );
   U_18 : AND2
      PORT MAP (
         A => WComp1out,
         B => WHit,
         F => F3
      );
   U_19 : AND2
      PORT MAP (
         A => LRUOut,
         B => miss,
         F => F6
      );
   CondMux : BitMux2
      PORT MAP (
         A   => BitOut,
         B   => BitOut1,
         Sel => RComp1out,
         F   => CondOut
      );
   Comp0 : Compare13
      PORT MAP (
         A => WDataOut0,
         B => WTag,
         F => WComp0out
      );
   Comp1 : Compare13
      PORT MAP (
         A => WDataOut1,
         B => WTag,
         F => WComp1out
      );
   Comp2 : Compare13
      PORT MAP (
         A => RDataOut0,
         B => RTag,
         F => RComp0out
      );
   Comp3 : Compare13
      PORT MAP (
         A => RDataOut1,
         B => RTag,
         F => RComp1out
      );
   PCMinus2 : MINUS2
      PORT MAP (
         PCout         => Waddr,
         clk           => clk,
         RESET_DELAYED => RESET_DELAYED,
         PCPlus2out    => Waddr1
      );
   U_1 : OR2
      PORT MAP (
         A => WComp0out,
         B => WComp1out,
         F => WHit
      );
   U_5 : OR2
      PORT MAP (
         A => RComp0out,
         B => RComp1out,
         F => Hit
      );
   U_14 : OR2
      PORT MAP (
         A => F8,
         B => F7,
         F => F2
      );
   U_15 : OR2
      PORT MAP (
         A => F3,
         B => F6,
         F => B
      );
   U_0 : PCSplitter
      PORT MAP (
         Tag   => RTag,
         INDEX => RIndex,
         PC    => Raddr1
      );
   U_4 : PCSplitter
      PORT MAP (
         Tag   => WTag,
         INDEX => WIndex,
         PC    => Waddr1
      );
   BRTagArray2 : RWBRTagArray
      PORT MAP (
         DataIn   => WTag,
         RDataOut => RDataOut0,
         WDataOut => WDataOut0,
         RIndex   => RIndex,
         WIndex   => WIndex,
         Reset_L  => Reset_L,
         Write    => Write0
      );
   BRTagArray3 : RWBRTagArray
      PORT MAP (
         DataIn   => WTag,
         RDataOut => RDataOut1,
         WDataOut => WDataOut1,
         RIndex   => RIndex,
         WIndex   => WIndex,
         Reset_L  => Reset_L,
         Write    => Write1
      );
   CondBit0 : RWBitArray
      PORT MAP (
         BitIn    => CondIn,
         BitOut   => BitOut,
         BitWrite => Write0,
         RIndex   => RIndex,
         WIndex   => WIndex,
         Reset_L  => Reset_L
      );
   CondBit1 : RWBitArray
      PORT MAP (
         BitIn    => CondIn,
         BitOut   => BitOut1,
         BitWrite => Write1,
         RIndex   => RIndex,
         WIndex   => WIndex,
         Reset_L  => Reset_L
      );
   LRUBit : RWBitArray
      PORT MAP (
         BitIn    => Write0,
         BitOut   => LRUOut,
         BitWrite => Bwrite,
         RIndex   => RIndex,
         WIndex   => WIndex,
         Reset_L  => Reset_L
      );
   BHTArray2 : RWTwoBitArray
      PORT MAP (
         DataIn  => BHTIn,
         DataOut => DataOut4,
         RIndex  => RIndex,
         WIndex  => WIndex,
         Reset_L => Reset_L,
         Write   => Write0
      );
   BHTArray3 : RWTwoBitArray
      PORT MAP (
         DataIn  => BHTIn,
         DataOut => DataOut5,
         RIndex  => RIndex,
         WIndex  => WIndex,
         Reset_L => Reset_L,
         Write   => Write1
      );
   Addr0 : RWWordArray
      PORT MAP (
         DataIn  => AddrIn,
         DataOut => DataOut2,
         RIndex  => RIndex,
         WIndex  => WIndex,
         Reset_L => Reset_L,
         Write   => Write0
      );
   Addr1 : RWWordArray
      PORT MAP (
         DataIn  => AddrIn,
         DataOut => DataOut3,
         RIndex  => RIndex,
         WIndex  => WIndex,
         Reset_L => Reset_L,
         Write   => Write1
      );
   BHTMux : TwoBitMux2
      PORT MAP (
         A   => DataOut4,
         B   => DataOut5,
         Sel => RComp1out,
         F   => BHTOut
      );
   AddrMux : WordMux2
      PORT MAP (
         A   => DataOut2,
         B   => DataOut3,
         Sel => RComp1out,
         F   => AddrOut
      );
   U_2 : NOR2
      PORT MAP (
         A => LRUOut,
         B => WHit,
         F => F8
      );
   U_3 : NOT1
      PORT MAP (
         A => WHit,
         F => miss
      );
   U_6 : NOT1
      PORT MAP (
         A => WComp1out,
         F => F
      );

END struct;
