-- VHDL Entity ece411.mp2_CPU.symbol
--
-- Created:
--          by - baker30.ews (evrt-252-27.ews.illinois.edu)
--          at - 17:49:11 03/03/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY mp2_CPU IS
   PORT( 
      RESET_l : IN     std_logic;
      START_H : IN     std_logic
   );

-- Declarations

END mp2_CPU ;

--
-- VHDL Architecture ece411.mp2_CPU.struct
--
-- Created:
--          by - baker30.ews (evrt-252-27.ews.illinois.edu)
--          at - 17:49:11 03/03/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF mp2_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS    : LC3b_word;
   SIGNAL ALUMuxSel  : lc3b_4mux_sel;
   SIGNAL ALUop      : LC3b_aluop;
   SIGNAL CheckN     : std_logic;
   SIGNAL CheckP     : std_logic;
   SIGNAL CheckZ     : std_logic;
   SIGNAL DATAIN     : LC3b_word;
   SIGNAL DATAOUT    : LC3b_word;
   SIGNAL DESMuxSel  : std_logic;
   SIGNAL IRout      : LC3b_word;
   SIGNAL LoadIR     : std_logic;
   SIGNAL LoadMAR    : std_logic;
   SIGNAL LoadMDR    : std_logic;
   SIGNAL LoadNZP    : std_logic;
   SIGNAL LoadPC     : std_logic;
   SIGNAL MARMuxSel  : lc3b_4mux_sel;
   SIGNAL MDRMuxSel  : std_logic;
   SIGNAL MREAD_L    : std_logic;
   SIGNAL MRESP_H    : std_logic;
   SIGNAL MWRITEH_L  : std_logic;
   SIGNAL MWRITEL_L  : std_logic;
   SIGNAL Opcode     : LC3b_opcode;
   SIGNAL PCAddrSel  : std_logic;
   SIGNAL PCMuxSel   : lc3b_4mux_sel;
   SIGNAL RFMuxSel   : lc3b_4mux_sel;
   SIGNAL RegWrite   : std_logic;
   SIGNAL StoreSR    : std_logic;
   SIGNAL ZEXTMuxSel : std_logic;
   SIGNAL clk        : std_logic := '0';
   SIGNAL n          : std_logic;
   SIGNAL p          : std_logic;
   SIGNAL z          : std_logic;


   -- Component Declarations
   COMPONENT CLKgen
   PORT (
      clk : INOUT  std_logic  := '0'
   );
   END COMPONENT;
   COMPONENT Control
   PORT (
      CheckN     : IN     std_logic ;
      CheckP     : IN     std_logic ;
      CheckZ     : IN     std_logic ;
      IRout      : IN     LC3b_word ;
      MRESP_H    : IN     std_logic ;
      Opcode     : IN     LC3b_opcode ;
      RESET_l    : IN     std_logic ;
      START_H    : IN     std_logic ;
      clk        : IN     std_logic ;
      n          : IN     std_logic ;
      p          : IN     std_logic ;
      z          : IN     std_logic ;
      ALUMuxSel  : OUT    lc3b_4mux_sel ;
      ALUop      : OUT    LC3b_aluop ;
      DESMuxSel  : OUT    std_logic ;
      LoadIR     : OUT    std_logic ;
      LoadMAR    : OUT    std_logic ;
      LoadMDR    : OUT    std_logic ;
      LoadNZP    : OUT    std_logic ;
      LoadPC     : OUT    std_logic ;
      MARMuxSel  : OUT    lc3b_4mux_sel ;
      MDRMuxSel  : OUT    std_logic ;
      MREAD_L    : OUT    std_logic ;
      MWRITEH_L  : OUT    std_logic ;
      MWRITEL_L  : OUT    std_logic ;
      PCAddrSel  : OUT    std_logic ;
      PCMuxSel   : OUT    lc3b_4mux_sel ;
      RFMuxSel   : OUT    lc3b_4mux_sel ;
      RegWrite   : OUT    std_logic ;
      StoreSR    : OUT    std_logic ;
      ZEXTMuxSel : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Datapath
   PORT (
      ALUMuxSel  : IN     lc3b_4mux_sel ;
      ALUop      : IN     LC3b_aluop ;
      DATAIN     : IN     LC3b_word ;
      DESMuxSel  : IN     std_logic ;
      LoadIR     : IN     std_logic ;
      LoadMAR    : IN     std_logic ;
      LoadMDR    : IN     std_logic ;
      LoadNZP    : IN     std_logic ;
      LoadPC     : IN     std_logic ;
      MARMuxSel  : IN     lc3b_4mux_sel ;
      MDRMuxSel  : IN     std_logic ;
      PCAddrSel  : IN     std_logic ;
      PCMuxSel   : IN     lc3b_4mux_sel ;
      RESET_l    : IN     std_logic ;
      RFMuxSel   : IN     lc3b_4mux_sel ;
      RegWrite   : IN     std_logic ;
      StoreSR    : IN     std_logic ;
      ZEXTMuxSel : IN     std_logic ;
      clk        : IN     std_logic ;
      ADDRESS    : OUT    LC3b_word ;
      CheckN     : OUT    std_logic ;
      CheckP     : OUT    std_logic ;
      CheckZ     : OUT    std_logic ;
      DATAOUT    : OUT    LC3b_word ;
      IRout      : OUT    LC3b_word ;
      Opcode     : OUT    LC3b_opcode ;
      n          : OUT    std_logic ;
      p          : OUT    std_logic ;
      z          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Memory
   PORT (
      ADDRESS   : IN     LC3b_word ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      clk       : IN     std_logic ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : CLKgen USE ENTITY ece411.CLKgen;
   FOR ALL : Control USE ENTITY ece411.Control;
   FOR ALL : Datapath USE ENTITY ece411.Datapath;
   FOR ALL : Memory USE ENTITY ece411.Memory;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   I0 : CLKgen
      PORT MAP (
         clk => clk
      );
   ControlUnit : Control
      PORT MAP (
         CheckN     => CheckN,
         CheckP     => CheckP,
         CheckZ     => CheckZ,
         IRout      => IRout,
         MRESP_H    => MRESP_H,
         Opcode     => Opcode,
         RESET_l    => RESET_l,
         START_H    => START_H,
         clk        => clk,
         n          => n,
         p          => p,
         z          => z,
         ALUMuxSel  => ALUMuxSel,
         ALUop      => ALUop,
         DESMuxSel  => DESMuxSel,
         LoadIR     => LoadIR,
         LoadMAR    => LoadMAR,
         LoadMDR    => LoadMDR,
         LoadNZP    => LoadNZP,
         LoadPC     => LoadPC,
         MARMuxSel  => MARMuxSel,
         MDRMuxSel  => MDRMuxSel,
         MREAD_L    => MREAD_L,
         MWRITEH_L  => MWRITEH_L,
         MWRITEL_L  => MWRITEL_L,
         PCAddrSel  => PCAddrSel,
         PCMuxSel   => PCMuxSel,
         RFMuxSel   => RFMuxSel,
         RegWrite   => RegWrite,
         StoreSR    => StoreSR,
         ZEXTMuxSel => ZEXTMuxSel
      );
   theDatapath : Datapath
      PORT MAP (
         ALUMuxSel  => ALUMuxSel,
         ALUop      => ALUop,
         DATAIN     => DATAIN,
         DESMuxSel  => DESMuxSel,
         LoadIR     => LoadIR,
         LoadMAR    => LoadMAR,
         LoadMDR    => LoadMDR,
         LoadNZP    => LoadNZP,
         LoadPC     => LoadPC,
         MARMuxSel  => MARMuxSel,
         MDRMuxSel  => MDRMuxSel,
         PCAddrSel  => PCAddrSel,
         PCMuxSel   => PCMuxSel,
         RESET_l    => RESET_l,
         RFMuxSel   => RFMuxSel,
         RegWrite   => RegWrite,
         StoreSR    => StoreSR,
         ZEXTMuxSel => ZEXTMuxSel,
         clk        => clk,
         ADDRESS    => ADDRESS,
         CheckN     => CheckN,
         CheckP     => CheckP,
         CheckZ     => CheckZ,
         DATAOUT    => DATAOUT,
         IRout      => IRout,
         Opcode     => Opcode,
         n          => n,
         p          => p,
         z          => z
      );
   DRAM : Memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_l   => RESET_l,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;
